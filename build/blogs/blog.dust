<!DOCTYPE html>
<html>
  <head>
    <title>{subject.title}</title>
    
    
    
    
    
    
    
    
    
    <link href="/foundation-icons/foundation-icons.css" rel="stylesheet"/>
    {>"app/header/global.dust"/}
  <script type="text/javascript">;(function(e,t,n){function i(n,s){if(!t[n]){if(!e[n]){var o=typeof require=="function"&&require;if(!s&&o)return o(n,!0);if(r)return r(n,!0);throw new Error("Cannot find module '"+n+"'")}var u=t[n]={exports:{}};e[n][0].call(u.exports,function(t){var r=e[n][1][t];return i(r?r:t)},u,u.exports)}return t[n].exports}var r=typeof require=="function"&&require;for(var s=0;s<n.length;s++)i(n[s]);return i})({1:[function(require,module,exports){
var $__TypeError = TypeError,
    $__Object = Object,
    $__getOwnPropertyDescriptor = $__Object.getOwnPropertyDescriptor,
    $__getPrototypeOf = $__Object.getPrototypeOf,
    $__getPropertyDescriptor = function(object, name) {
      while (object !== null) {
        var result = $__getOwnPropertyDescriptor(object, name);
        if (result) return result;
        object = $__getPrototypeOf(object);
      }
      return undefined;
    },
    $__superDescriptor = function(proto, name) {
      if (!proto) throw new $__TypeError('super is null');
      return $__getPropertyDescriptor(proto, name);
    },
    $__superCall = function(self, proto, name, args) {
      var descriptor = $__superDescriptor(proto, name);
      if (descriptor) {
        if ('value'in descriptor) return descriptor.value.apply(self, args);
        if (descriptor.get) return descriptor.get.call(self).apply(self, args);
      }
      throw new $__TypeError("Object has no method '" + name + "'.");
    },
    $__getProtoParent = function(superClass) {
      if (typeof superClass === 'function') {
        var prototype = superClass.prototype;
        if (Object(prototype) === prototype || prototype === null) return superClass.prototype;
      }
      if (superClass === null) return null;
      throw new TypeError();
    },
    $__getOwnPropertyNames = $__Object.getOwnPropertyNames,
    $__getDescriptors = function(object) {
      var descriptors = {},
          name,
          names = $__getOwnPropertyNames(object);
      for (var i = 0; i < names.length; i++) {
        var name = names[i];
        descriptors[name] = $__getOwnPropertyDescriptor(object, name);
      }
      return descriptors;
    },
    $__createClass = function(object, staticObject, protoParent, superClass, hasConstructor) {
      var ctor = object.constructor;
      if (typeof superClass === 'function') ctor.__proto__ = superClass;
      if (!hasConstructor && protoParent === null) ctor = object.constructor = function() {};
      var descriptors = $__getDescriptors(object);
      descriptors.constructor.enumerable = false;
      ctor.prototype = Object.create(protoParent, descriptors);
      Object.defineProperties(ctor, $__getDescriptors(staticObject));
      return ctor;
    };
Function.prototype.bind = Function.prototype.bind || function(oThis) {
  if (typeof this !== "function") {
    throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
  }
  var aArgs = Array.prototype.slice.call(arguments, 1),
      fToBind = this,
      fNOP = function() {},
      fBound = function() {
        return fToBind.apply(this instanceof fNOP && oThis ? this: oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
      };
  fNOP.prototype = this.prototype;
  fBound.prototype = new fNOP();
  return fBound;
};
Date.now = Date.now || function() {
  return new Date().getTime();
};
if (typeof WeakMap === 'undefined') {
  (function() {
    var defineProperty = Object.defineProperty;
    var counter = Date.now() % 1e9;
    var WeakMapPolyfill = function() {
      this.name = '__st' + (Math.random() * 1e9 >>> 0) + (counter++ + '__');
    };
    WeakMapPolyfill.prototype = {
      set: function(key, value) {
        var entry = key[this.name];
        if (entry && entry[0] === key) entry[1] = value; else defineProperty(key, this.name, {
          value: [key, value],
          writable: true
        });
      },
      get: function(key) {
        var entry;
        return (entry = key[this.name]) && entry[0] === key ? entry[1]: undefined;
      },
      'delete': function(key) {
        this.set(key, undefined);
      }
    };
    window.WeakMapPolyfill = WeakMapPolyfill;
    window.WeakMap = WeakMapPolyfill;
  })();
}
var TAG_NAME = /^[a-zA-Z]+$/;
var mutationMacro = function(nodes) {
  if (nodes.length === 1) {
    return typeof nodes === "string" ? window.document.createTextNode(nodes): nodes;
  }
  var fragment = window.document.createDocumentFragment();
  var list = Array.prototype.slice.call(nodes);
  for (var i = 0; i < list.length; i++) {
    fragment.appendChild(typeof nodes === "string" ? window.document.createTextNode(list[i]): list[i]);
  }
};
Element.prototype.matches = Element.prototype.matches || Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function(selector) {
  if (TAG_NAME.test(selector)) {
    return this.tagName === selector;
  }
  var node = this,
      nodes = (node.parentNode || node.document).querySelectorAll(selector),
      i = - 1;
  while (nodes[++i] && nodes[i] != node);
  return !!nodes[i];
};
Element.prototype.prepend = Element.prototype.prepend || function() {
  var nodes = mutationMacro(arguments);
  if (this.firstChild) {
    this.insertBefore(nodes, this.firstChild);
  } else {
    this.appendChild(nodes);
  }
};
Element.prototype.append = Element.prototype.append || function() {
  this.appendChild(mutationMacro(arguments));
};
Element.prototype.remove = Element.prototype.remove || function() {
  if (this.parentNode) {
    this.parentNode.removeChild(this);
  }
};
Element.prototype.replace = Element.prototype.replace || function() {
  if (this.parentNode) {
    this.parentNode.replaceChild(mutationMacro(arguments), this);
  }
};
(function() {
  if (!window.MutationObserver && window.WebKitMutationObserver) {
    window.MutationObserver = window.WebKitMutationObserver;
    return;
  }
  if (!window.MutationObserver) {
    try {
      throw undefined;
    } catch (Registration) {
      try {
        throw undefined;
      } catch (selectRecord) {
        try {
          throw undefined;
        } catch (recordRepresentsCurrentMutation) {
          try {
            throw undefined;
          } catch (clearRecords) {
            try {
              throw undefined;
            } catch (getRecordWithOldValue) {
              try {
                throw undefined;
              } catch (getRecord) {
                try {
                  throw undefined;
                } catch (copyMutationRecord) {
                  try {
                    throw undefined;
                  } catch (MutationRecord) {
                    try {
                      throw undefined;
                    } catch (MutationObserverPolyfill) {
                      try {
                        throw undefined;
                      } catch (forEachAncestorAndObserverEnqueueRecord) {
                        try {
                          throw undefined;
                        } catch (removeTransientObserversFor) {
                          try {
                            throw undefined;
                          } catch (dispatchCallbacks) {
                            try {
                              throw undefined;
                            } catch (wrapIfNeeded) {
                              try {
                                throw undefined;
                              } catch (scheduleCallback) {
                                var registrationsTable = new WeakMap();
                                var setImmediate = window.msSetImmediate;
                                if (!setImmediate) {
                                  var setImmediateQueue = [];
                                  var sentinel = String(Math.random());
                                  window.addEventListener('message', function(e) {
                                    if (e.data === sentinel) {
                                      var queue = setImmediateQueue;
                                      setImmediateQueue = [];
                                      queue.forEach(function(func) {
                                        func();
                                      });
                                    }
                                  });
                                  setImmediate = function(func) {
                                    setImmediateQueue.push(func);
                                    window.postMessage(sentinel, '*');
                                  };
                                }
                                var isScheduled = false;
                                var scheduledObservers = [];
                                scheduleCallback = function(observer) {
                                  scheduledObservers.push(observer);
                                  if (!isScheduled) {
                                    isScheduled = true;
                                    setImmediate(dispatchCallbacks);
                                  }
                                };
                                wrapIfNeeded = function(node) {
                                  return window.ShadowDOMPolyfill && window.ShadowDOMPolyfill.wrapIfNeeded(node) || node;
                                };
                                dispatchCallbacks = function() {
                                  isScheduled = false;
                                  var observers = scheduledObservers;
                                  scheduledObservers = [];
                                  observers.sort(function(o1, o2) {
                                    return o1.uid_ - o2.uid_;
                                  });
                                  var anyNonEmpty = false;
                                  observers.forEach(function(observer) {
                                    var queue = observer.takeRecords();
                                    removeTransientObserversFor(observer);
                                    if (queue.length) {
                                      observer.callback_(queue, observer);
                                      anyNonEmpty = true;
                                    }
                                  });
                                  if (anyNonEmpty) dispatchCallbacks();
                                };
                                removeTransientObserversFor = function(observer) {
                                  observer.nodes_.forEach(function(node) {
                                    var registrations = registrationsTable.get(node);
                                    if (!registrations) return;
                                    registrations.forEach(function(registration) {
                                      if (registration.observer === observer) registration.removeTransientObservers();
                                    });
                                  });
                                };
                                forEachAncestorAndObserverEnqueueRecord = function(target, callback) {
                                  for (var node = target; node; node = node.parentNode) {
                                    var registrations = registrationsTable.get(node);
                                    if (registrations) {
                                      for (var j = 0; j < registrations.length; j++) {
                                        var registration = registrations[j];
                                        var options = registration.options;
                                        if (node !== target && !options.subtree) continue;
                                        var record = callback(options);
                                        if (record) registration.enqueue(record);
                                      }
                                    }
                                  }
                                };
                                var uidCounter = 0;
                                MutationObserverPolyfill = function(callback) {
                                  this.callback_ = callback;
                                  this.nodes_ = [];
                                  this.records_ = [];
                                  this.uid_ = ++uidCounter;
                                };
                                MutationObserverPolyfill.prototype = {
                                  observe: function(target, options) {
                                    target = wrapIfNeeded(target);
                                    if (!options.childList && !options.attributes && !options.characterData || options.attributeOldValue && !options.attributes || options.attributeFilter && options.attributeFilter.length && !options.attributes || options.characterDataOldValue && !options.characterData) {
                                      throw new SyntaxError();
                                    }
                                    var registrations = registrationsTable.get(target);
                                    if (!registrations) registrationsTable.set(target, registrations = []);
                                    var registration;
                                    for (var i = 0; i < registrations.length; i++) {
                                      if (registrations[i].observer === this) {
                                        registration = registrations[i];
                                        registration.removeListeners();
                                        registration.options = options;
                                        break;
                                      }
                                    }
                                    if (!registration) {
                                      registration = new Registration(this, target, options);
                                      registrations.push(registration);
                                      this.nodes_.push(target);
                                    }
                                    registration.addListeners();
                                  },
                                  disconnect: function() {
                                    this.nodes_.forEach(function(node) {
                                      var registrations = registrationsTable.get(node);
                                      for (var i = 0; i < registrations.length; i++) {
                                        var registration = registrations[i];
                                        if (registration.observer === this) {
                                          registration.removeListeners();
                                          registrations.splice(i, 1);
                                          break;
                                        }
                                      }
                                    }, this);
                                    this.records_ = [];
                                  },
                                  takeRecords: function() {
                                    var copyOfRecords = this.records_;
                                    this.records_ = [];
                                    return copyOfRecords;
                                  }
                                };
                                MutationRecord = function(type, target) {
                                  this.type = type;
                                  this.target = target;
                                  this.addedNodes = [];
                                  this.removedNodes = [];
                                  this.previousSibling = null;
                                  this.nextSibling = null;
                                  this.attributeName = null;
                                  this.attributeNamespace = null;
                                  this.oldValue = null;
                                };
                                copyMutationRecord = function(original) {
                                  var record = new MutationRecord(original.type, original.target);
                                  record.addedNodes = original.addedNodes.slice();
                                  record.removedNodes = original.removedNodes.slice();
                                  record.previousSibling = original.previousSibling;
                                  record.nextSibling = original.nextSibling;
                                  record.attributeName = original.attributeName;
                                  record.attributeNamespace = original.attributeNamespace;
                                  record.oldValue = original.oldValue;
                                  return record;
                                };
                                var currentRecord,
                                    recordWithOldValue;
                                getRecord = function(type, target) {
                                  return currentRecord = new MutationRecord(type, target);
                                };
                                getRecordWithOldValue = function(oldValue) {
                                  if (recordWithOldValue) return recordWithOldValue;
                                  recordWithOldValue = copyMutationRecord(currentRecord);
                                  recordWithOldValue.oldValue = oldValue;
                                  return recordWithOldValue;
                                };
                                clearRecords = function() {
                                  currentRecord = recordWithOldValue = undefined;
                                };
                                recordRepresentsCurrentMutation = function(record) {
                                  return record === recordWithOldValue || record === currentRecord;
                                };
                                selectRecord = function(lastRecord, newRecord) {
                                  if (lastRecord === newRecord) return lastRecord;
                                  if (recordWithOldValue && recordRepresentsCurrentMutation(lastRecord)) return recordWithOldValue;
                                  return null;
                                };
                                Registration = function(observer, target, options) {
                                  this.observer = observer;
                                  this.target = target;
                                  this.options = options;
                                  this.transientObservedNodes = [];
                                };
                                Registration.prototype = {
                                  enqueue: function(record) {
                                    var records = this.observer.records_;
                                    var length = records.length;
                                    if (records.length > 0) {
                                      var lastRecord = records[length - 1];
                                      var recordToReplaceLast = selectRecord(lastRecord, record);
                                      if (recordToReplaceLast) {
                                        records[length - 1] = recordToReplaceLast;
                                        return;
                                      }
                                    } else {
                                      scheduleCallback(this.observer);
                                    }
                                    records[length] = record;
                                  },
                                  addListeners: function() {
                                    this.addListeners_(this.target);
                                  },
                                  addListeners_: function(node) {
                                    var options = this.options;
                                    if (options.attributes) node.addEventListener('DOMAttrModified', this, true);
                                    if (options.characterData) node.addEventListener('DOMCharacterDataModified', this, true);
                                    if (options.childList) node.addEventListener('DOMNodeInserted', this, true);
                                    if (options.childList || options.subtree) node.addEventListener('DOMNodeRemoved', this, true);
                                  },
                                  removeListeners: function() {
                                    this.removeListeners_(this.target);
                                  },
                                  removeListeners_: function(node) {
                                    var options = this.options;
                                    if (options.attributes) node.removeEventListener('DOMAttrModified', this, true);
                                    if (options.characterData) node.removeEventListener('DOMCharacterDataModified', this, true);
                                    if (options.childList) node.removeEventListener('DOMNodeInserted', this, true);
                                    if (options.childList || options.subtree) node.removeEventListener('DOMNodeRemoved', this, true);
                                  },
                                  addTransientObserver: function(node) {
                                    if (node === this.target) return;
                                    this.addListeners_(node);
                                    this.transientObservedNodes.push(node);
                                    var registrations = registrationsTable.get(node);
                                    if (!registrations) registrationsTable.set(node, registrations = []);
                                    registrations.push(this);
                                  },
                                  removeTransientObservers: function() {
                                    var transientObservedNodes = this.transientObservedNodes;
                                    this.transientObservedNodes = [];
                                    transientObservedNodes.forEach(function(node) {
                                      this.removeListeners_(node);
                                      var registrations = registrationsTable.get(node);
                                      for (var i = 0; i < registrations.length; i++) {
                                        if (registrations[i] === this) {
                                          registrations.splice(i, 1);
                                          break;
                                        }
                                      }
                                    }, this);
                                  },
                                  handleEvent: function(e) {
                                    e.stopImmediatePropagation();
                                    switch (e.type) {
                                      case 'DOMAttrModified':
                                        var name = e.attrName;
                                        var namespace = e.relatedNode.namespaceURI;
                                        var target = e.target;
                                        var record = new getRecord('attributes', target);
                                        record.attributeName = name;
                                        record.attributeNamespace = namespace;
                                        var oldValue = e.attrChange === MutationEvent.ADDITION ? null: e.prevValue;
                                        forEachAncestorAndObserverEnqueueRecord(target, function(options) {
                                          if (!options.attributes) return;
                                          if (options.attributeFilter && options.attributeFilter.length && options.attributeFilter.indexOf(name) === - 1 && options.attributeFilter.indexOf(namespace) === - 1) {
                                            return;
                                          }
                                          if (options.attributeOldValue) return getRecordWithOldValue(oldValue);
                                          return record;
                                        });
                                        break;
                                      case 'DOMCharacterDataModified':
                                        var target = e.target;
                                        var record = getRecord('characterData', target);
                                        var oldValue = e.prevValue;
                                        forEachAncestorAndObserverEnqueueRecord(target, function(options) {
                                          if (!options.characterData) return;
                                          if (options.characterDataOldValue) return getRecordWithOldValue(oldValue);
                                          return record;
                                        });
                                        break;
                                      case 'DOMNodeRemoved':
                                        this.addTransientObserver(e.target);
                                      case 'DOMNodeInserted':
                                        var target = e.relatedNode;
                                        var changedNode = e.target;
                                        var addedNodes,
                                            removedNodes;
                                        if (e.type === 'DOMNodeInserted') {
                                          addedNodes = [changedNode];
                                          removedNodes = [];
                                        } else {
                                          addedNodes = [];
                                          removedNodes = [changedNode];
                                        }
                                        var previousSibling = changedNode.previousSibling;
                                        var nextSibling = changedNode.nextSibling;
                                        var record = getRecord('childList', target);
                                        record.addedNodes = addedNodes;
                                        record.removedNodes = removedNodes;
                                        record.previousSibling = previousSibling;
                                        record.nextSibling = nextSibling;
                                        forEachAncestorAndObserverEnqueueRecord(target, function(options) {
                                          if (!options.childList) return;
                                          return record;
                                        });
                                    }
                                    clearRecords();
                                  }
                                };
                                window.MutationObserverPolyfill = MutationObserverPolyfill;
                                window.MutationObserver = MutationObserverPolyfill;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
})();
var scope = {};
scope.logFlags = {dom: false};
if (!document.register) {
  try {
    throw undefined;
  } catch (cloneNode) {
    try {
      throw undefined;
    } catch (upgradeElement) {
      try {
        throw undefined;
      } catch (createElement) {
        try {
          throw undefined;
        } catch (generateConstructor) {
          try {
            throw undefined;
          } catch (registerDefinition) {
            try {
              throw undefined;
            } catch (getRegisteredDefinition) {
              try {
                throw undefined;
              } catch (changeAttribute) {
                try {
                  throw undefined;
                } catch (overrideAttributeApi) {
                  try {
                    throw undefined;
                  } catch (created) {
                    try {
                      throw undefined;
                    } catch (customMixin) {
                      try {
                        throw undefined;
                      } catch (implement) {
                        try {
                          throw undefined;
                        } catch (upgrade) {
                          try {
                            throw undefined;
                          } catch (instantiate) {
                            var register = function(name, options) {
                              var definition = options || {};
                              if (!name) {
                                throw new Error('document.register: first argument `name` must not be empty');
                              }
                              if (name.indexOf('-') < 0) {
                                throw new Error('document.register: first argument (\'name\') must contain a dash (\'-\'). Argument provided was \'' + String(name) + '\'.');
                              }
                              if (getRegisteredDefinition(name)) {
                                throw new Error('DuplicateDefinitionError: a type with name \'' + String(name) + '\' is already registered');
                              }
                              if (!definition.prototype) {
                                throw new Error('Options missing required prototype property');
                              }
                              definition.name = name.toLowerCase();
                              definition.lifecycle = definition.lifecycle || {};
                              definition.ancestry = ancestry(definition['extends']);
                              resolveTagName(definition);
                              resolvePrototypeChain(definition);
                              overrideAttributeApi(definition.prototype);
                              registerDefinition(definition.name, definition);
                              definition.ctor = generateConstructor(definition);
                              definition.ctor.prototype = definition.prototype;
                              definition.prototype.constructor = definition.ctor;
                              scope.addedNode(document);
                              return definition.ctor;
                            };
                            var ancestry = function ancestry(extnds) {
                              var extendee = getRegisteredDefinition(extnds);
                              if (extendee) {
                                return ancestry(extendee['extends']).concat([extendee]);
                              }
                              return [];
                            };
                            var resolveTagName = function(definition) {
                              var baseTag = definition['extends'];
                              for (var i = 0,
                                  a; (a = definition.ancestry[i]); i++) {
                                baseTag = a.is && a.tag;
                              }
                              definition.tag = baseTag || definition.name;
                              if (baseTag) {
                                definition.is = definition.name;
                              }
                            };
                            var resolvePrototypeChain = function(definition) {
                              if (!Object.__proto__) {
                                var nativePrototype = HTMLElement.prototype;
                                if (definition.is) {
                                  var inst = document.createElement(definition.tag);
                                  nativePrototype = Object.getPrototypeOf(inst);
                                }
                                var proto = definition.prototype,
                                    ancestor;
                                while (proto && (proto !== nativePrototype)) {
                                  var ancestor = Object.getPrototypeOf(proto);
                                  proto.__proto__ = ancestor;
                                  proto = ancestor;
                                }
                              }
                              definition['native'] = nativePrototype;
                            };
                            instantiate = function(definition) {
                              return upgrade(domCreateElement(definition.tag), definition);
                            };
                            upgrade = function(element, definition) {
                              if (definition.is) {
                                element.setAttribute('is', definition.is);
                              }
                              element.removeAttribute('unresolved');
                              implement(element, definition);
                              element.__upgraded__ = true;
                              scope.addedSubtree(element);
                              created(element);
                              return element;
                            };
                            implement = function(element, definition) {
                              if (Object.__proto__) {
                                element.__proto__ = definition.prototype;
                              } else {
                                customMixin(element, definition.prototype, definition['native']);
                                element.__proto__ = definition.prototype;
                              }
                            };
                            customMixin = function(inTarget, inSrc, inNative) {
                              var used = {};
                              var p = inSrc;
                              while (p !== inNative && p !== HTMLUnknownElement.prototype) {
                                var keys = Object.getOwnPropertyNames(p);
                                for (var i = 0,
                                    k; k = keys[i]; i++) {
                                  if (!used[k]) {
                                    Object.defineProperty(inTarget, k, Object.getOwnPropertyDescriptor(p, k));
                                    used[k] = 1;
                                  }
                                }
                                p = Object.getPrototypeOf(p);
                              }
                            };
                            created = function(element) {
                              if (element.createdCallback) {
                                element.createdCallback();
                              }
                            };
                            overrideAttributeApi = function(prototype) {
                              if (prototype.setAttribute._polyfilled) {
                                return;
                              }
                              var setAttribute = prototype.setAttribute;
                              prototype.setAttribute = function(name, value) {
                                changeAttribute.call(this, name, value, setAttribute);
                              };
                              var removeAttribute = prototype.removeAttribute;
                              prototype.removeAttribute = function(name) {
                                changeAttribute.call(this, name, null, removeAttribute);
                              };
                              prototype.setAttribute._polyfilled = true;
                            };
                            changeAttribute = function(name, value, operation) {
                              var oldValue = this.getAttribute(name);
                              operation.apply(this, arguments);
                              var newValue = this.getAttribute(name);
                              if (this.attributeChangedCallback && (newValue !== oldValue)) {
                                this.attributeChangedCallback(name, oldValue, newValue);
                              }
                            };
                            var registry = {};
                            scope.registry = registry;
                            getRegisteredDefinition = function(name) {
                              if (name) {
                                return registry[name.toLowerCase()];
                              }
                            };
                            registerDefinition = function(name, definition) {
                              registry[name] = definition;
                            };
                            generateConstructor = function(definition) {
                              return function() {
                                return instantiate(definition);
                              };
                            };
                            createElement = function(tag, typeExtension) {
                              var definition = getRegisteredDefinition(typeExtension || tag);
                              if (definition) {
                                return new definition.ctor();
                              }
                              return domCreateElement(tag);
                            };
                            upgradeElement = function(element) {
                              if (!element.__upgraded__ && (element.nodeType === Node.ELEMENT_NODE)) {
                                var type = element.getAttribute('is') || element.localName;
                                var definition = getRegisteredDefinition(type);
                                return definition && upgrade(element, definition);
                              }
                            };
                            cloneNode = function(deep) {
                              var n = domCloneNode.call(this, deep);
                              addedNode(n);
                              return n;
                            };
                            var domCreateElement = document.createElement.bind(document);
                            var domCloneNode = Node.prototype.cloneNode;
                            document.register = register;
                            document.createElement = createElement;
                            Node.prototype.cloneNode = cloneNode;
                            scope.upgradeElement = upgradeElement;
                            (function(scope) {
                              var logFlags = scope.logFlags;
                              function findAll(node, find, data) {
                                var e = node.firstElementChild;
                                if (!e) {
                                  e = node.firstChild;
                                  while (e && e.nodeType !== Node.ELEMENT_NODE) {
                                    e = e.nextSibling;
                                  }
                                }
                                while (e) {
                                  if (find(e, data) !== true) {
                                    findAll(e, find, data);
                                  }
                                  e = e.nextElementSibling;
                                }
                                return null;
                              }
                              function forSubtree(node, cb) {
                                findAll(node, function(e) {
                                  if (cb(e)) {
                                    return true;
                                  }
                                });
                              }
                              function added(node) {
                                if (upgrade(node)) {
                                  insertedNode(node);
                                  return true;
                                }
                                inserted(node);
                              }
                              function addedSubtree(node) {
                                forSubtree(node, function(e) {
                                  if (added(e)) {
                                    return true;
                                  }
                                });
                              }
                              function addedNode(node) {
                                return added(node) || addedSubtree(node);
                              }
                              function upgrade(node) {
                                if (!node.__upgraded__ && node.nodeType === Node.ELEMENT_NODE) {
                                  var type = node.getAttribute('is') || node.localName;
                                  var definition = scope.registry[type];
                                  if (definition) {
                                    logFlags.dom && console.group('upgrade:', node.localName);
                                    scope.upgradeElement(node);
                                    logFlags.dom && console.groupEnd();
                                    return true;
                                  }
                                }
                              }
                              function insertedNode(node) {
                                inserted(node);
                                if (inDocument(node)) {
                                  forSubtree(node, function(e) {
                                    inserted(e);
                                  });
                                }
                              }
                              var hasPolyfillMutations = (window.MutationObserver === window.MutationObserverPolyfill);
                              var isPendingMutations = false;
                              var pendingMutations = [];
                              function deferMutation(fn) {
                                pendingMutations.push(fn);
                                if (!isPendingMutations) {
                                  isPendingMutations = true;
                                  var async = (window.Platform && window.Platform.endOfMicrotask) || setTimeout;
                                  async(takeMutations);
                                }
                              }
                              function takeMutations() {
                                isPendingMutations = false;
                                var $p = pendingMutations;
                                for (var i = 0,
                                    l = $p.length,
                                    p; (i < l) && (p = $p[i]); i++) {
                                  p();
                                }
                                pendingMutations = [];
                              }
                              function inserted(element) {
                                if (hasPolyfillMutations) {
                                  deferMutation(function() {
                                    _inserted(element);
                                  });
                                } else {
                                  _inserted(element);
                                }
                              }
                              function _inserted(element) {
                                if (element.enteredViewCallback || (element.__upgraded__ && logFlags.dom)) {
                                  logFlags.dom && console.group('inserted:', element.localName);
                                  if (inDocument(element)) {
                                    element.__inserted = (element.__inserted || 0) + 1;
                                    if (element.__inserted < 1) {
                                      element.__inserted = 1;
                                    }
                                    if (element.__inserted > 1) {
                                      logFlags.dom && console.warn('inserted:', element.localName, 'insert/remove count:', element.__inserted);
                                    } else if (element.enteredViewCallback) {
                                      logFlags.dom && console.log('inserted:', element.localName);
                                      element.enteredViewCallback();
                                    }
                                  }
                                  logFlags.dom && console.groupEnd();
                                }
                              }
                              function removedNode(node) {
                                removed(node);
                                forSubtree(node, function(e) {
                                  removed(e);
                                });
                              }
                              function removed(element) {
                                if (hasPolyfillMutations) {
                                  deferMutation(function() {
                                    _removed(element);
                                  });
                                } else {
                                  _removed(element);
                                }
                              }
                              function _removed(element) {
                                if (element.leftViewCallback || (element.__upgraded__ && logFlags.dom)) {
                                  logFlags.dom && console.log('removed:', element.localName);
                                  if (!inDocument(element)) {
                                    element.__inserted = (element.__inserted || 0) - 1;
                                    if (element.__inserted > 0) {
                                      element.__inserted = 0;
                                    }
                                    if (element.__inserted < 0) {
                                      logFlags.dom && console.warn('removed:', element.localName, 'insert/remove count:', element.__inserted);
                                    } else if (element.leftViewCallback) {
                                      element.leftViewCallback();
                                    }
                                  }
                                }
                              }
                              function inDocument(element) {
                                var p = element;
                                var doc = document;
                                while (p) {
                                  if (p == doc) {
                                    return true;
                                  }
                                  p = p.parentNode || p.host;
                                }
                              }
                              function handler(mutations) {
                                if (logFlags.dom) {
                                  var mx = mutations[0];
                                  if (mx && mx.type === 'childList' && mx.addedNodes) {
                                    if (mx.addedNodes) {
                                      var d = mx.addedNodes[0];
                                      while (d && d !== document && !d.host) {
                                        d = d.parentNode;
                                      }
                                      var u = d && (d.URL || d._URL || (d.host && d.host.localName)) || '';
                                      u = u.split('/?').shift().split('/').pop();
                                    }
                                  }
                                  console.group('mutations (%d) [%s]', mutations.length, u || '');
                                }
                                mutations.forEach(function(mx) {
                                  if (mx.type === 'childList') {
                                    forEach(mx.addedNodes, function(n) {
                                      if (!n.localName) {
                                        return;
                                      }
                                      addedNode(n);
                                    });
                                    forEach(mx.removedNodes, function(n) {
                                      if (!n.localName) {
                                        return;
                                      }
                                      removedNode(n);
                                    });
                                  }
                                });
                                logFlags.dom && console.groupEnd();
                              }
                              ;
                              var observer = new MutationObserver(handler);
                              var forEach = Array.prototype.forEach.call.bind(Array.prototype.forEach);
                              function observeDocument() {
                                observer.observe(document, {
                                  childList: true,
                                  subtree: true
                                });
                              }
                              function upgradeDocument() {
                                logFlags.dom && console.group('upgradeDocument: ', (document.URL || document._URL || '').split('/').pop());
                                addedNode(document);
                                logFlags.dom && console.groupEnd();
                              }
                              scope.addedNode = addedNode;
                              window.addedNode = addedNode;
                              scope.addedSubtree = addedSubtree;
                              observeDocument();
                              window.addEventListener('DOMContentLoaded', function() {
                                upgradeDocument();
                              });
                            })(scope);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
;
(function() {
  var lastTime = 0;
  var vendors = ['ms', 'moz', 'webkit', 'o'];
  for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
    window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
    window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'RequestCancelAnimationFrame'];
  }
  if (!window.requestAnimationFrame || !window.cancelAnimationFrame) {
    window.requestAnimationFrame = function(callback, element) {
      var currTime = new Date().getTime();
      var timeToCall = Math.max(0, 16 - (currTime - lastTime));
      var id = window.setTimeout(function() {
        callback(currTime + timeToCall);
      }, timeToCall);
      lastTime = currTime + timeToCall;
      return id;
    };
  }
  if (!window.cancelAnimationFrame) {
    window.cancelAnimationFrame = function(id) {
      clearTimeout(id);
    };
  }
}());
Element.prototype.hide = function() {
  this.style.display = "none";
  this.style.visibility = "none";
};
Element.prototype.show = function() {
  this.style.display = "block";
  this.style.visibilty = "visible";
};
Element.prototype.isVisible = function() {
  var style = window.getComputedStyle(this);
  return (style.getPropertyValue("display") !== "none" && style.getPropertyValue("visibility") !== "none");
};
NodeList.prototype.forEach = HTMLCollection.prototype.forEach = function(cb) {
  for (var i = 0; i < this.length; i++) {
    cb(this[i], i);
  }
};
var getClosestParentWhichIs = function(el, criteria) {
  while (!el.matches(criteria)) {
    if (el.parentNode && el.parentNode !== document) {
      el = el.parentNode;
    } else {
      return null;
    }
  }
  return el;
};
window.onload = function() {
  {
    try {
      throw undefined;
    } catch (toBeShown) {
      toBeShown = document.querySelectorAll(".jsmore");
      {
        try {
          throw undefined;
        } catch ($i) {
          $i = 0;
          for (; $i < toBeShown.length; $i++) {
            try {
              throw undefined;
            } catch (i) {
              i = $i;
              try {
                toBeShown[i].classList.remove("jsmore");
              } finally {
                $i = i;
              }
            }
          }
        }
      }
    }
  }
  {
    try {
      throw undefined;
    } catch (toBeHidden) {
      toBeHidden = document.querySelectorAll(".jsless");
      {
        try {
          throw undefined;
        } catch ($i) {
          $i = 0;
          for (; $i < toBeHidden.length; $i++) {
            try {
              throw undefined;
            } catch (i) {
              i = $i;
              try {
                toBeHidden[i].classList.add("jsmore");
              } finally {
                $i = i;
              }
            }
          }
        }
      }
    }
  }
  var CSS_ID = /^#/;
  document.addEventListener("click", function(e) {
    el = getClosestParentWhichIs(e.target, "[cite], [exec]") || e.target;
    var cite = el.getAttribute("cite");
    var exec = el.getAttribute("exec");
    var href = el.getAttribute("href");
    if (cite) {
      if (history.pushState) {
        history.pushState({state: cite}, document.title, el.href || location.href);
      }
      while (cite) {
        var target = document.querySelector(cite);
        target.scrollIntoView({target: el});
        e.stopPropagation();
        e.preventDefault();
        cite = target.getAttribute("chain");
      }
    } else if (exec) {
      document.execCommand(exec);
      e.preventDefault();
    } else if (CSS_ID.test(href)) {
      var target = document.querySelector(href);
      if (target.matches("ul")) {
        if (target.isVisible()) {
          target.hide();
        } else {
          target.show();
        }
        e.preventDefault();
      }
    } else {
      console.log(el);
    }
  });
  document.addEventListener("focusout", function(e) {
    if (e.target.matches('input[type="text"]')) {
      e.target.classList.add("interacted");
    }
  });
};
var SlidableElement = function($__super) {
  'use strict';
  var $__proto = $__getProtoParent($__super);
  var $SlidableElement = ($__createClass)({
    constructor: function() {
      $__superCall(this, $__proto, "constructor", arguments);
    },
    enteredViewCallback: function() {
      if (this.hasAttribute("hidden")) {
        this.hide();
      } else {
        this.show();
      }
    },
    scrollIntoView: function() {
      if (this.getAttribute("hidden") === null) {
        this.setAttribute("hidden", "");
      } else {
        this.removeAttribute("hidden");
      }
    },
    attributeChangedCallback: function(key, oldVal, newVal) {
      if (key === "hidden") {
        if (newVal === null) {
          this.slideDown();
        } else {
          this.hide();
        }
      }
    },
    isHidden: function() {
      return window.getComputedStyle(this).visibility !== "visibile" || window.getComputedStyle(this).display === "none";
    },
    show: function() {
      this.style.display = "block";
      this.style.visibility = "visibile";
    },
    mockHeight: function() {
      var simulacrum = this.cloneNode(true);
      simulacrum.style.height = "auto";
      simulacrum.style.display = "block";
      simulacrum.style.visibility = "hidden";
      simulacrum.style.position = "absolute";
      simulacrum.style.left = "-9999px";
      this.parentNode.insertBefore(simulacrum, this);
      var x = simulacrum.clientHeight;
      simulacrum.remove();
      return x;
    },
    slideDown: function() {
      var $__0 = this;
      var duration = this.getAttribute("duration") || 500;
      var initialHeight = this.isHidden() ? 0: this.clientHeight;
      var finalHeight = this.mockHeight();
      var additionalHeight = finalHeight - initialHeight;
      var originalOverflow = this.style.overflow;
      this.style.height = initialHeight + "px";
      this.style.overflow = "hidden";
      this.show();
      var startTime = Date.now();
      var tween = (function() {
        var heightToBeSet = initialHeight + (((Date.now() - startTime) / duration) * additionalHeight);
        if (heightToBeSet < finalHeight) {
          $__0.style.height = heightToBeSet + "px";
          window.requestAnimationFrame(tween);
        } else {
          $__0.style.height = "auto";
          $__0.style.overflow = originalOverflow;
        }
      });
      tween();
    }
  }, {}, $__proto, $__super, false);
  return $SlidableElement;
}(HTMLDivElement);
document.register("x-slidable", {prototype: SlidableElement.prototype});
var RichTextEditor = function($__super) {
  'use strict';
  var $__proto = $__getProtoParent($__super);
  var $RichTextEditor = ($__createClass)({
    constructor: function() {
      $__superCall(this, $__proto, "constructor", arguments);
    },
    createdCallback: function() {
      this.contentEditable = true;
      this.addEventListener("DOMSubtreeModified", this.update.bind(this));
    },
    scrollIntoView: function(e) {
      var el = e.target;
      document.execCommand(el.getAttribute("action"));
    },
    update: function() {
      var textarea = this.getAttribute("for");
      if (textarea) {
        document.querySelector(textarea).value = (this.innerHTML);
      }
    }
  }, {}, $__proto, $__super, false);
  return $RichTextEditor;
}(HTMLDivElement);
document.register("x-richtexteditor", {prototype: RichTextEditor.prototype});
function Snowflake() {
  this.x = 0;
  this.y = 0;
  this.vy = 0;
  this.vx = 0;
  this.r = 0;
}
Snowflake.prototype.reset = function(width, height) {
  this.x = Math.random() * width;
  this.y = Math.random() * - height;
  this.vy = 1 + Math.random() * 3;
  this.vx = 0.5 - Math.random();
  this.r = 1 + Math.random() * 2;
  this.o = 0.5 + Math.random() * 0.5;
};
var SnowfallElement = function($__super) {
  'use strict';
  var $__proto = $__getProtoParent($__super);
  var $SnowfallElement = ($__createClass)({
    constructor: function() {
      $__superCall(this, $__proto, "constructor", arguments);
    },
    createdCallback: function() {
      this.count = parseInt(this.getAttribute("count")) || 300;
      this.canvas = document.createElement('canvas');
      this.canvas.style.zIndex = "-25";
      this.canvas.style.width = "100%";
      this.canvas.style.position = "absolute";
      this.canvas.style.left = "0";
      this.canvas.style.top = "0";
      this.ctx = this.canvas.getContext("2d");
      this.snowflakes = [];
      for (var i = 0; i < this.count; i++) {
        var snowflake = new Snowflake();
        snowflake.reset(this.clientWidth, this.clientHeight);
        this.snowflakes.push(snowflake);
      }
      this.reset();
      window.addEventListener("resize", this.reset.bind(this));
      window.requestAnimationFrame(this.update.bind(this));
      this.appendChild(this.canvas);
    },
    reset: function() {
      this.canvas.width = this.clientWidth;
      this.canvas.height = this.clientHeight;
      this.ctx.fillStyle = "#FFF";
    },
    update: function() {
      this.ctx.clearRect(0, 0, this.clientWidth, this.clientHeight);
      for (var i = 0; i < this.count; i++) {
        var snowflake = this.snowflakes[i];
        snowflake.y += snowflake.vy;
        snowflake.x += snowflake.vx;
        this.ctx.globalAlpha = snowflake.o;
        this.ctx.beginPath();
        this.ctx.arc(snowflake.x, snowflake.y, snowflake.r, 0, Math.PI * 2, false);
        this.ctx.closePath();
        this.ctx.fill();
        if (snowflake.y > this.clientHeight || snowflake.x > this.clientWidth) {
          snowflake.reset(this.clientWidth, this.clientHeight);
        }
      }
      window.requestAnimationFrame(this.update.bind(this));
    }
  }, {}, $__proto, $__super, false);
  return $SnowfallElement;
}(HTMLDivElement);
document.register("x-snowfall", {prototype: SnowfallElement.prototype});
var DeletableElement = function($__super) {
  'use strict';
  var $__proto = $__getProtoParent($__super);
  var $DeletableElement = ($__createClass)({
    constructor: function() {
      $__superCall(this, $__proto, "constructor", arguments);
    },
    scrollIntoView: function(e) {
      var route = e.target.formAction || e.target.form.action;
      if (route) {
        var req = new XMLHttpRequest();
        req.open("delete", route);
        req.send();
      }
      this.remove();
    }
  }, {}, $__proto, $__super, false);
  return $DeletableElement;
}(HTMLDivElement);
document.register("x-deletable", {prototype: DeletableElement.prototype});
var BubbleElement = function($__super) {
  'use strict';
  var $__proto = $__getProtoParent($__super);
  var $BubbleElement = ($__createClass)({
    constructor: function() {
      $__superCall(this, $__proto, "constructor", arguments);
    },
    createdCallback: function() {
      if (this.hasAttribute("hidden")) {
        this.style.display = "none";
      } else {
        this.style.display = "block";
      }
    },
    show: function() {
      this.style.visibility = "hidden";
      this.style.display = "block";
      if (!this.triangle) {
        this.triangle = document.createElement("div");
        this.style.position = this.triangle.style.position = "absolute";
        this.style.border = "1px solid black";
        this.style.height = "auto";
        this.style.top = "0px";
        this.style.left = "0px";
        var fur = document.querySelector(this.getAttribute("for"));
        var rect = fur.getBoundingClientRect();
        var offset = this.getBoundingClientRect();
        this.triangle.style.width = "0";
        this.triangle.style.height = "0";
        this.triangle.style.borderTop = this.triangle.style.borderBottom = "10px solid transparent";
        this.triangle.style.borderRight = "10px solid black";
        this.triangle.style.top = (this.clientHeight / 2) - (this.mockHeight(this.triangle) / 2) + "px";
        this.triangle.style.left = "-10px";
        this.style.top = (rect.top - (this.clientHeight / 2) - offset.top + (fur.clientHeight / 2)) + "px";
        this.style.left = (rect.left - offset.left) + fur.clientWidth + 10 + "px";
        this.style.zIndex = this.triangle.style.zIndex = "25";
        this.appendChild(this.triangle);
      }
      this.triangle.style.display = "block";
      this.style.visibility = "visible";
    },
    hide: function() {
      this.style.display = "none";
      this.triangle.style.display = "none";
    },
    scrollIntoView: function() {
      console.log("fsdfds");
      if (this.hasAttribute("hidden")) {
        this.removeAttribute("hidden");
      } else {
        this.setAttribute("hidden", "");
      }
    },
    mockHeight: function(el) {
      var simulacrum = (el || this).cloneNode(true);
      simulacrum.style.height = "auto";
      simulacrum.style.display = "block";
      simulacrum.style.visibility = "hidden";
      simulacrum.style.position = "absolute";
      simulacrum.style.left = "-9999px";
      this.parentNode.insertBefore(simulacrum, this);
      var x = simulacrum.clientHeight;
      simulacrum.remove();
      return x;
    },
    attributeChangedCallback: function(key, oldVal, newVal) {
      if (key === "hidden") {
        if (newVal === null) {
          this.show();
        } else {
          this.hide();
        }
      }
    }
  }, {}, $__proto, $__super, false);
  return $BubbleElement;
}(HTMLDivElement);
document.register("x-bubble", {prototype: BubbleElement.prototype});


},{}]},{},[1])
;</script><style type="text/css">meta.foundation-mq-small {
  font-family: "/only screen and (max-width: 40em)/";
  width: 0em; }

meta.foundation-mq-medium {
  font-family: "/only screen and (min-width:40.063em)/";
  width: 40.063em; }

meta.foundation-mq-large {
  font-family: "/only screen and (min-width:64.063em)/";
  width: 64.063em; }

meta.foundation-mq-xlarge {
  font-family: "/only screen and (min-width:90.063em)/";
  width: 90.063em; }

meta.foundation-mq-xxlarge {
  font-family: "/only screen and (min-width:120.063em)/";
  width: 120.063em; }

*, *:before, *:after {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box; }

html, body {
  font-size: 100%; }

body {
  background: white;
  color: #222222;
  padding: 0;
  margin: 0;
  font-family: "Helvetica Neue", "Helvetica", Helvetica, Arial, sans-serif;
  font-weight: normal;
  font-style: normal;
  line-height: 1;
  position: relative;
  cursor: default; }

a:hover {
  cursor: pointer; }

img, object, embed {
  max-width: 100%;
  height: auto; }

object, embed {
  height: 100%; }

img {
  -ms-interpolation-mode: bicubic; }

#map_canvas img, #map_canvas embed, #map_canvas object, .map_canvas img, .map_canvas embed, .map_canvas object {
  max-width: none !important; }

.left {
  float: left !important; }

.right {
  float: right !important; }

.clearfix {
  *zoom: 1; }
  .clearfix:before, .clearfix:after {
    content: " ";
    display: table; }
  .clearfix:after {
    clear: both; }

.text-left {
  text-align: left !important; }

.text-right {
  text-align: right !important; }

.text-center {
  text-align: center !important; }

.text-justify {
  text-align: justify !important; }

.hide {
  display: none; }

.start {
  float: left !important; }

.end {
  float: right !important; }

.text-start {
  text-align: left !important; }

.text-end {
  text-align: right !important; }

.antialiased {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale; }

img {
  display: inline-block;
  vertical-align: middle; }

textarea, #newPostForm x-richtexteditor {
  height: auto;
  min-height: 50px; }

select {
  width: 100%; }

.row {
  width: 100%;
  margin-left: auto;
  margin-right: auto;
  margin-top: 0;
  margin-bottom: 0;
  max-width: 62.5rem;
  *zoom: 1; }
  .row:before, .row:after {
    content: " ";
    display: table; }
  .row:after {
    clear: both; }
  .row.collapse > .column, .row.collapse > .columns {
    position: relative;
    padding-left: 0;
    padding-right: 0;
    float: left; }
  .row.collapse .row {
    margin-left: 0;
    margin-right: 0; }
  .row .row {
    width: auto;
    margin-left: -0.9375rem;
    margin-right: -0.9375rem;
    margin-top: 0;
    margin-bottom: 0;
    max-width: none;
    *zoom: 1; }
    .row .row:before, .row .row:after {
      content: " ";
      display: table; }
    .row .row:after {
      clear: both; }
    .row .row.collapse {
      width: auto;
      margin: 0;
      max-width: none;
      *zoom: 1; }
      .row .row.collapse:before, .row .row.collapse:after {
        content: " ";
        display: table; }
      .row .row.collapse:after {
        clear: both; }

.column, .columns {
  position: relative;
  padding-left: 0.9375rem;
  padding-right: 0.9375rem;
  width: 100%;
  float: left; }

@media only screen {
  .column.small-centered, .columns.small-centered {
    position: relative;
    margin-left: auto;
    margin-right: auto;
    float: none; }
  .column.small-uncentered, .columns.small-uncentered {
    margin-left: 0;
    margin-right: 0;
    float: left; }
  .column.small-uncentered.opposite, .columns.small-uncentered.opposite {
    float: right; }
  .small-push-1 {
    position: relative;
    left: 8.33333%;
    right: auto; }
  .small-pull-1 {
    position: relative;
    right: 8.33333%;
    left: auto; }
  .small-push-2 {
    position: relative;
    left: 16.66667%;
    right: auto; }
  .small-pull-2 {
    position: relative;
    right: 16.66667%;
    left: auto; }
  .small-push-3 {
    position: relative;
    left: 25%;
    right: auto; }
  .small-pull-3 {
    position: relative;
    right: 25%;
    left: auto; }
  .small-push-4 {
    position: relative;
    left: 33.33333%;
    right: auto; }
  .small-pull-4 {
    position: relative;
    right: 33.33333%;
    left: auto; }
  .small-push-5 {
    position: relative;
    left: 41.66667%;
    right: auto; }
  .small-pull-5 {
    position: relative;
    right: 41.66667%;
    left: auto; }
  .small-push-6 {
    position: relative;
    left: 50%;
    right: auto; }
  .small-pull-6 {
    position: relative;
    right: 50%;
    left: auto; }
  .small-push-7 {
    position: relative;
    left: 58.33333%;
    right: auto; }
  .small-pull-7 {
    position: relative;
    right: 58.33333%;
    left: auto; }
  .small-push-8 {
    position: relative;
    left: 66.66667%;
    right: auto; }
  .small-pull-8 {
    position: relative;
    right: 66.66667%;
    left: auto; }
  .small-push-9 {
    position: relative;
    left: 75%;
    right: auto; }
  .small-pull-9 {
    position: relative;
    right: 75%;
    left: auto; }
  .small-push-10 {
    position: relative;
    left: 83.33333%;
    right: auto; }
  .small-pull-10 {
    position: relative;
    right: 83.33333%;
    left: auto; }
  .small-push-11 {
    position: relative;
    left: 91.66667%;
    right: auto; }
  .small-pull-11 {
    position: relative;
    right: 91.66667%;
    left: auto; }
  .column, .columns {
    position: relative;
    padding-left: 0.9375rem;
    padding-right: 0.9375rem;
    float: left; }
  .small-1 {
    position: relative;
    width: 8.33333%; }
  .small-2 {
    position: relative;
    width: 16.66667%; }
  .small-3 {
    position: relative;
    width: 25%; }
  .small-4 {
    position: relative;
    width: 33.33333%; }
  .small-5 {
    position: relative;
    width: 41.66667%; }
  .small-6 {
    position: relative;
    width: 50%; }
  .small-7 {
    position: relative;
    width: 58.33333%; }
  .small-8 {
    position: relative;
    width: 66.66667%; }
  .small-9 {
    position: relative;
    width: 75%; }
  .small-10 {
    position: relative;
    width: 83.33333%; }
  .small-11 {
    position: relative;
    width: 91.66667%; }
  .small-12 {
    position: relative;
    width: 100%; }
  [class*="column"] + [class*="column"]:last-child {
    float: right; }
  [class*="column"] + [class*="column"].end {
    float: left; }
  .small-offset-0 {
    position: relative;
    margin-left: 0% !important; }
  .small-offset-1 {
    position: relative;
    margin-left: 8.33333% !important; }
  .small-offset-2 {
    position: relative;
    margin-left: 16.66667% !important; }
  .small-offset-3 {
    position: relative;
    margin-left: 25% !important; }
  .small-offset-4 {
    position: relative;
    margin-left: 33.33333% !important; }
  .small-offset-5 {
    position: relative;
    margin-left: 41.66667% !important; }
  .small-offset-6 {
    position: relative;
    margin-left: 50% !important; }
  .small-offset-7 {
    position: relative;
    margin-left: 58.33333% !important; }
  .small-offset-8 {
    position: relative;
    margin-left: 66.66667% !important; }
  .small-offset-9 {
    position: relative;
    margin-left: 75% !important; }
  .small-offset-10 {
    position: relative;
    margin-left: 83.33333% !important; }
  .column.small-reset-order, .columns.small-reset-order {
    margin-left: 0;
    margin-right: 0;
    left: auto;
    right: auto;
    float: left; } }

@media only screen and (min-width:40.063em) {
  .column.medium-centered, .columns.medium-centered {
    position: relative;
    margin-left: auto;
    margin-right: auto;
    float: none; }
  .column.medium-uncentered, .columns.medium-uncentered {
    margin-left: 0;
    margin-right: 0;
    float: left; }
  .column.medium-uncentered.opposite, .columns.medium-uncentered.opposite {
    float: right; }
  .medium-push-1 {
    position: relative;
    left: 8.33333%;
    right: auto; }
  .medium-pull-1 {
    position: relative;
    right: 8.33333%;
    left: auto; }
  .medium-push-2 {
    position: relative;
    left: 16.66667%;
    right: auto; }
  .medium-pull-2 {
    position: relative;
    right: 16.66667%;
    left: auto; }
  .medium-push-3 {
    position: relative;
    left: 25%;
    right: auto; }
  .medium-pull-3 {
    position: relative;
    right: 25%;
    left: auto; }
  .medium-push-4 {
    position: relative;
    left: 33.33333%;
    right: auto; }
  .medium-pull-4 {
    position: relative;
    right: 33.33333%;
    left: auto; }
  .medium-push-5 {
    position: relative;
    left: 41.66667%;
    right: auto; }
  .medium-pull-5 {
    position: relative;
    right: 41.66667%;
    left: auto; }
  .medium-push-6 {
    position: relative;
    left: 50%;
    right: auto; }
  .medium-pull-6 {
    position: relative;
    right: 50%;
    left: auto; }
  .medium-push-7 {
    position: relative;
    left: 58.33333%;
    right: auto; }
  .medium-pull-7 {
    position: relative;
    right: 58.33333%;
    left: auto; }
  .medium-push-8 {
    position: relative;
    left: 66.66667%;
    right: auto; }
  .medium-pull-8 {
    position: relative;
    right: 66.66667%;
    left: auto; }
  .medium-push-9 {
    position: relative;
    left: 75%;
    right: auto; }
  .medium-pull-9 {
    position: relative;
    right: 75%;
    left: auto; }
  .medium-push-10 {
    position: relative;
    left: 83.33333%;
    right: auto; }
  .medium-pull-10 {
    position: relative;
    right: 83.33333%;
    left: auto; }
  .medium-push-11 {
    position: relative;
    left: 91.66667%;
    right: auto; }
  .medium-pull-11 {
    position: relative;
    right: 91.66667%;
    left: auto; }
  .column, .columns {
    position: relative;
    padding-left: 0.9375rem;
    padding-right: 0.9375rem;
    float: left; }
  .medium-1 {
    position: relative;
    width: 8.33333%; }
  .medium-2 {
    position: relative;
    width: 16.66667%; }
  .medium-3 {
    position: relative;
    width: 25%; }
  .medium-4 {
    position: relative;
    width: 33.33333%; }
  .medium-5 {
    position: relative;
    width: 41.66667%; }
  .medium-6 {
    position: relative;
    width: 50%; }
  .medium-7 {
    position: relative;
    width: 58.33333%; }
  .medium-8 {
    position: relative;
    width: 66.66667%; }
  .medium-9 {
    position: relative;
    width: 75%; }
  .medium-10 {
    position: relative;
    width: 83.33333%; }
  .medium-11 {
    position: relative;
    width: 91.66667%; }
  .medium-12 {
    position: relative;
    width: 100%; }
  [class*="column"] + [class*="column"]:last-child {
    float: right; }
  [class*="column"] + [class*="column"].end {
    float: left; }
  .medium-offset-0 {
    position: relative;
    margin-left: 0% !important; }
  .medium-offset-1 {
    position: relative;
    margin-left: 8.33333% !important; }
  .medium-offset-2 {
    position: relative;
    margin-left: 16.66667% !important; }
  .medium-offset-3 {
    position: relative;
    margin-left: 25% !important; }
  .medium-offset-4 {
    position: relative;
    margin-left: 33.33333% !important; }
  .medium-offset-5 {
    position: relative;
    margin-left: 41.66667% !important; }
  .medium-offset-6 {
    position: relative;
    margin-left: 50% !important; }
  .medium-offset-7 {
    position: relative;
    margin-left: 58.33333% !important; }
  .medium-offset-8 {
    position: relative;
    margin-left: 66.66667% !important; }
  .medium-offset-9 {
    position: relative;
    margin-left: 75% !important; }
  .medium-offset-10 {
    position: relative;
    margin-left: 83.33333% !important; }
  .column.medium-reset-order, .columns.medium-reset-order {
    margin-left: 0;
    margin-right: 0;
    left: auto;
    right: auto;
    float: left; }
  .push-1 {
    position: relative;
    left: 8.33333%;
    right: auto; }
  .pull-1 {
    position: relative;
    right: 8.33333%;
    left: auto; }
  .push-2 {
    position: relative;
    left: 16.66667%;
    right: auto; }
  .pull-2 {
    position: relative;
    right: 16.66667%;
    left: auto; }
  .push-3 {
    position: relative;
    left: 25%;
    right: auto; }
  .pull-3 {
    position: relative;
    right: 25%;
    left: auto; }
  .push-4 {
    position: relative;
    left: 33.33333%;
    right: auto; }
  .pull-4 {
    position: relative;
    right: 33.33333%;
    left: auto; }
  .push-5 {
    position: relative;
    left: 41.66667%;
    right: auto; }
  .pull-5 {
    position: relative;
    right: 41.66667%;
    left: auto; }
  .push-6 {
    position: relative;
    left: 50%;
    right: auto; }
  .pull-6 {
    position: relative;
    right: 50%;
    left: auto; }
  .push-7 {
    position: relative;
    left: 58.33333%;
    right: auto; }
  .pull-7 {
    position: relative;
    right: 58.33333%;
    left: auto; }
  .push-8 {
    position: relative;
    left: 66.66667%;
    right: auto; }
  .pull-8 {
    position: relative;
    right: 66.66667%;
    left: auto; }
  .push-9 {
    position: relative;
    left: 75%;
    right: auto; }
  .pull-9 {
    position: relative;
    right: 75%;
    left: auto; }
  .push-10 {
    position: relative;
    left: 83.33333%;
    right: auto; }
  .pull-10 {
    position: relative;
    right: 83.33333%;
    left: auto; }
  .push-11 {
    position: relative;
    left: 91.66667%;
    right: auto; }
  .pull-11 {
    position: relative;
    right: 91.66667%;
    left: auto; } }

@media only screen and (min-width:64.063em) {
  .column.large-centered, .columns.large-centered {
    position: relative;
    margin-left: auto;
    margin-right: auto;
    float: none; }
  .column.large-uncentered, .columns.large-uncentered {
    margin-left: 0;
    margin-right: 0;
    float: left; }
  .column.large-uncentered.opposite, .columns.large-uncentered.opposite {
    float: right; }
  .large-push-1 {
    position: relative;
    left: 8.33333%;
    right: auto; }
  .large-pull-1 {
    position: relative;
    right: 8.33333%;
    left: auto; }
  .large-push-2 {
    position: relative;
    left: 16.66667%;
    right: auto; }
  .large-pull-2 {
    position: relative;
    right: 16.66667%;
    left: auto; }
  .large-push-3 {
    position: relative;
    left: 25%;
    right: auto; }
  .large-pull-3 {
    position: relative;
    right: 25%;
    left: auto; }
  .large-push-4 {
    position: relative;
    left: 33.33333%;
    right: auto; }
  .large-pull-4 {
    position: relative;
    right: 33.33333%;
    left: auto; }
  .large-push-5 {
    position: relative;
    left: 41.66667%;
    right: auto; }
  .large-pull-5 {
    position: relative;
    right: 41.66667%;
    left: auto; }
  .large-push-6 {
    position: relative;
    left: 50%;
    right: auto; }
  .large-pull-6 {
    position: relative;
    right: 50%;
    left: auto; }
  .large-push-7 {
    position: relative;
    left: 58.33333%;
    right: auto; }
  .large-pull-7 {
    position: relative;
    right: 58.33333%;
    left: auto; }
  .large-push-8 {
    position: relative;
    left: 66.66667%;
    right: auto; }
  .large-pull-8 {
    position: relative;
    right: 66.66667%;
    left: auto; }
  .large-push-9 {
    position: relative;
    left: 75%;
    right: auto; }
  .large-pull-9 {
    position: relative;
    right: 75%;
    left: auto; }
  .large-push-10 {
    position: relative;
    left: 83.33333%;
    right: auto; }
  .large-pull-10 {
    position: relative;
    right: 83.33333%;
    left: auto; }
  .large-push-11 {
    position: relative;
    left: 91.66667%;
    right: auto; }
  .large-pull-11 {
    position: relative;
    right: 91.66667%;
    left: auto; }
  .column, .columns {
    position: relative;
    padding-left: 0.9375rem;
    padding-right: 0.9375rem;
    float: left; }
  .large-1 {
    position: relative;
    width: 8.33333%; }
  .large-2 {
    position: relative;
    width: 16.66667%; }
  .large-3 {
    position: relative;
    width: 25%; }
  .large-4 {
    position: relative;
    width: 33.33333%; }
  .large-5 {
    position: relative;
    width: 41.66667%; }
  .large-6 {
    position: relative;
    width: 50%; }
  .large-7 {
    position: relative;
    width: 58.33333%; }
  .large-8 {
    position: relative;
    width: 66.66667%; }
  .large-9 {
    position: relative;
    width: 75%; }
  .large-10 {
    position: relative;
    width: 83.33333%; }
  .large-11 {
    position: relative;
    width: 91.66667%; }
  .large-12 {
    position: relative;
    width: 100%; }
  [class*="column"] + [class*="column"]:last-child {
    float: right; }
  [class*="column"] + [class*="column"].end {
    float: left; }
  .large-offset-0 {
    position: relative;
    margin-left: 0% !important; }
  .large-offset-1 {
    position: relative;
    margin-left: 8.33333% !important; }
  .large-offset-2 {
    position: relative;
    margin-left: 16.66667% !important; }
  .large-offset-3 {
    position: relative;
    margin-left: 25% !important; }
  .large-offset-4 {
    position: relative;
    margin-left: 33.33333% !important; }
  .large-offset-5 {
    position: relative;
    margin-left: 41.66667% !important; }
  .large-offset-6 {
    position: relative;
    margin-left: 50% !important; }
  .large-offset-7 {
    position: relative;
    margin-left: 58.33333% !important; }
  .large-offset-8 {
    position: relative;
    margin-left: 66.66667% !important; }
  .large-offset-9 {
    position: relative;
    margin-left: 75% !important; }
  .large-offset-10 {
    position: relative;
    margin-left: 83.33333% !important; }
  .column.large-reset-order, .columns.large-reset-order {
    margin-left: 0;
    margin-right: 0;
    left: auto;
    right: auto;
    float: left; }
  .push-1 {
    position: relative;
    left: 8.33333%;
    right: auto; }
  .pull-1 {
    position: relative;
    right: 8.33333%;
    left: auto; }
  .push-2 {
    position: relative;
    left: 16.66667%;
    right: auto; }
  .pull-2 {
    position: relative;
    right: 16.66667%;
    left: auto; }
  .push-3 {
    position: relative;
    left: 25%;
    right: auto; }
  .pull-3 {
    position: relative;
    right: 25%;
    left: auto; }
  .push-4 {
    position: relative;
    left: 33.33333%;
    right: auto; }
  .pull-4 {
    position: relative;
    right: 33.33333%;
    left: auto; }
  .push-5 {
    position: relative;
    left: 41.66667%;
    right: auto; }
  .pull-5 {
    position: relative;
    right: 41.66667%;
    left: auto; }
  .push-6 {
    position: relative;
    left: 50%;
    right: auto; }
  .pull-6 {
    position: relative;
    right: 50%;
    left: auto; }
  .push-7 {
    position: relative;
    left: 58.33333%;
    right: auto; }
  .pull-7 {
    position: relative;
    right: 58.33333%;
    left: auto; }
  .push-8 {
    position: relative;
    left: 66.66667%;
    right: auto; }
  .pull-8 {
    position: relative;
    right: 66.66667%;
    left: auto; }
  .push-9 {
    position: relative;
    left: 75%;
    right: auto; }
  .pull-9 {
    position: relative;
    right: 75%;
    left: auto; }
  .push-10 {
    position: relative;
    left: 83.33333%;
    right: auto; }
  .pull-10 {
    position: relative;
    right: 83.33333%;
    left: auto; }
  .push-11 {
    position: relative;
    left: 91.66667%;
    right: auto; }
  .pull-11 {
    position: relative;
    right: 91.66667%;
    left: auto; } }

.accordion {
  *zoom: 1;
  margin-bottom: 0; }
  .accordion:before, .accordion:after {
    content: " ";
    display: table; }
  .accordion:after {
    clear: both; }
  .accordion dd {
    display: block;
    margin-bottom: 0 !important; }
    .accordion dd.active a {
      background: #e8e8e8; }
    .accordion dd > a {
      background: #efefef;
      color: #222222;
      padding: 1rem;
      display: block;
      font-family: "Helvetica Neue", "Helvetica", Helvetica, Arial, sans-serif;
      font-size: 1rem; }
      .accordion dd > a:hover {
        background: #e3e3e3; }
  .accordion .content {
    display: none;
    padding: 0.9375rem; }
    .accordion .content.active {
      display: block;
      background: white; }

.alert-box {
  border-style: solid;
  border-width: 1px;
  display: block;
  font-weight: normal;
  margin-bottom: 1.25rem;
  position: relative;
  padding: 0.875rem 1.5rem 0.875rem 0.875rem;
  font-size: 0.8125rem;
  background-color: #008cba;
  border-color: #007ba0;
  color: white; }
  .alert-box .close {
    font-size: 1.375rem;
    padding: 9px 6px 4px;
    line-height: 0;
    position: absolute;
    top: 50%;
    margin-top: -0.6875rem;
    right: 0.25rem;
    color: #333333;
    opacity: 0.3; }
    .alert-box .close:hover, .alert-box .close:focus {
      opacity: 0.5; }
  .alert-box.radius {
    -webkit-border-radius: 3px;
    border-radius: 3px; }
  .alert-box.round {
    -webkit-border-radius: 1000px;
    border-radius: 1000px; }
  .alert-box.success {
    background-color: #43ac6a;
    border-color: #3a945b;
    color: white; }
  .alert-box.alert {
    background-color: #f04124;
    border-color: #de2b0f;
    color: white; }
  .alert-box.secondary {
    background-color: #e7e7e7;
    border-color: #c7c7c7;
    color: #4f4f4f; }
  .alert-box.warning {
    background-color: #f08a24;
    border-color: #de770f;
    color: white; }
  .alert-box.info {
    background-color: #a0d3e8;
    border-color: #74bfdd;
    color: #4f4f4f; }

[class*="block-grid-"] {
  display: block;
  padding: 0;
  margin: 0 0 0 -0.625rem;
  *zoom: 1; }
  [class*="block-grid-"]:before, [class*="block-grid-"]:after {
    content: " ";
    display: table; }
  [class*="block-grid-"]:after {
    clear: both; }
  [class*="block-grid-"] > li {
    display: inline;
    height: auto;
    float: left;
    padding: 0 0.625rem 1.25rem; }

@media only screen {
  .small-block-grid-1 > li {
    width: 100%;
    padding: 0 0.625rem 1.25rem;
    list-style: none; }
    .small-block-grid-1 > li:nth-of-type(n) {
      clear: none; }
    .small-block-grid-1 > li:nth-of-type(1n+1) {
      clear: both; }
  .small-block-grid-2 > li {
    width: 50%;
    padding: 0 0.625rem 1.25rem;
    list-style: none; }
    .small-block-grid-2 > li:nth-of-type(n) {
      clear: none; }
    .small-block-grid-2 > li:nth-of-type(2n+1) {
      clear: both; }
  .small-block-grid-3 > li {
    width: 33.33333%;
    padding: 0 0.625rem 1.25rem;
    list-style: none; }
    .small-block-grid-3 > li:nth-of-type(n) {
      clear: none; }
    .small-block-grid-3 > li:nth-of-type(3n+1) {
      clear: both; }
  .small-block-grid-4 > li {
    width: 25%;
    padding: 0 0.625rem 1.25rem;
    list-style: none; }
    .small-block-grid-4 > li:nth-of-type(n) {
      clear: none; }
    .small-block-grid-4 > li:nth-of-type(4n+1) {
      clear: both; }
  .small-block-grid-5 > li {
    width: 20%;
    padding: 0 0.625rem 1.25rem;
    list-style: none; }
    .small-block-grid-5 > li:nth-of-type(n) {
      clear: none; }
    .small-block-grid-5 > li:nth-of-type(5n+1) {
      clear: both; }
  .small-block-grid-6 > li {
    width: 16.66667%;
    padding: 0 0.625rem 1.25rem;
    list-style: none; }
    .small-block-grid-6 > li:nth-of-type(n) {
      clear: none; }
    .small-block-grid-6 > li:nth-of-type(6n+1) {
      clear: both; }
  .small-block-grid-7 > li {
    width: 14.28571%;
    padding: 0 0.625rem 1.25rem;
    list-style: none; }
    .small-block-grid-7 > li:nth-of-type(n) {
      clear: none; }
    .small-block-grid-7 > li:nth-of-type(7n+1) {
      clear: both; }
  .small-block-grid-8 > li {
    width: 12.5%;
    padding: 0 0.625rem 1.25rem;
    list-style: none; }
    .small-block-grid-8 > li:nth-of-type(n) {
      clear: none; }
    .small-block-grid-8 > li:nth-of-type(8n+1) {
      clear: both; }
  .small-block-grid-9 > li {
    width: 11.11111%;
    padding: 0 0.625rem 1.25rem;
    list-style: none; }
    .small-block-grid-9 > li:nth-of-type(n) {
      clear: none; }
    .small-block-grid-9 > li:nth-of-type(9n+1) {
      clear: both; }
  .small-block-grid-10 > li {
    width: 10%;
    padding: 0 0.625rem 1.25rem;
    list-style: none; }
    .small-block-grid-10 > li:nth-of-type(n) {
      clear: none; }
    .small-block-grid-10 > li:nth-of-type(10n+1) {
      clear: both; }
  .small-block-grid-11 > li {
    width: 9.09091%;
    padding: 0 0.625rem 1.25rem;
    list-style: none; }
    .small-block-grid-11 > li:nth-of-type(n) {
      clear: none; }
    .small-block-grid-11 > li:nth-of-type(11n+1) {
      clear: both; }
  .small-block-grid-12 > li {
    width: 8.33333%;
    padding: 0 0.625rem 1.25rem;
    list-style: none; }
    .small-block-grid-12 > li:nth-of-type(n) {
      clear: none; }
    .small-block-grid-12 > li:nth-of-type(12n+1) {
      clear: both; } }

@media only screen and (min-width:40.063em) {
  .medium-block-grid-1 > li {
    width: 100%;
    padding: 0 0.625rem 1.25rem;
    list-style: none; }
    .medium-block-grid-1 > li:nth-of-type(n) {
      clear: none; }
    .medium-block-grid-1 > li:nth-of-type(1n+1) {
      clear: both; }
  .medium-block-grid-2 > li {
    width: 50%;
    padding: 0 0.625rem 1.25rem;
    list-style: none; }
    .medium-block-grid-2 > li:nth-of-type(n) {
      clear: none; }
    .medium-block-grid-2 > li:nth-of-type(2n+1) {
      clear: both; }
  .medium-block-grid-3 > li {
    width: 33.33333%;
    padding: 0 0.625rem 1.25rem;
    list-style: none; }
    .medium-block-grid-3 > li:nth-of-type(n) {
      clear: none; }
    .medium-block-grid-3 > li:nth-of-type(3n+1) {
      clear: both; }
  .medium-block-grid-4 > li {
    width: 25%;
    padding: 0 0.625rem 1.25rem;
    list-style: none; }
    .medium-block-grid-4 > li:nth-of-type(n) {
      clear: none; }
    .medium-block-grid-4 > li:nth-of-type(4n+1) {
      clear: both; }
  .medium-block-grid-5 > li {
    width: 20%;
    padding: 0 0.625rem 1.25rem;
    list-style: none; }
    .medium-block-grid-5 > li:nth-of-type(n) {
      clear: none; }
    .medium-block-grid-5 > li:nth-of-type(5n+1) {
      clear: both; }
  .medium-block-grid-6 > li {
    width: 16.66667%;
    padding: 0 0.625rem 1.25rem;
    list-style: none; }
    .medium-block-grid-6 > li:nth-of-type(n) {
      clear: none; }
    .medium-block-grid-6 > li:nth-of-type(6n+1) {
      clear: both; }
  .medium-block-grid-7 > li {
    width: 14.28571%;
    padding: 0 0.625rem 1.25rem;
    list-style: none; }
    .medium-block-grid-7 > li:nth-of-type(n) {
      clear: none; }
    .medium-block-grid-7 > li:nth-of-type(7n+1) {
      clear: both; }
  .medium-block-grid-8 > li {
    width: 12.5%;
    padding: 0 0.625rem 1.25rem;
    list-style: none; }
    .medium-block-grid-8 > li:nth-of-type(n) {
      clear: none; }
    .medium-block-grid-8 > li:nth-of-type(8n+1) {
      clear: both; }
  .medium-block-grid-9 > li {
    width: 11.11111%;
    padding: 0 0.625rem 1.25rem;
    list-style: none; }
    .medium-block-grid-9 > li:nth-of-type(n) {
      clear: none; }
    .medium-block-grid-9 > li:nth-of-type(9n+1) {
      clear: both; }
  .medium-block-grid-10 > li {
    width: 10%;
    padding: 0 0.625rem 1.25rem;
    list-style: none; }
    .medium-block-grid-10 > li:nth-of-type(n) {
      clear: none; }
    .medium-block-grid-10 > li:nth-of-type(10n+1) {
      clear: both; }
  .medium-block-grid-11 > li {
    width: 9.09091%;
    padding: 0 0.625rem 1.25rem;
    list-style: none; }
    .medium-block-grid-11 > li:nth-of-type(n) {
      clear: none; }
    .medium-block-grid-11 > li:nth-of-type(11n+1) {
      clear: both; }
  .medium-block-grid-12 > li {
    width: 8.33333%;
    padding: 0 0.625rem 1.25rem;
    list-style: none; }
    .medium-block-grid-12 > li:nth-of-type(n) {
      clear: none; }
    .medium-block-grid-12 > li:nth-of-type(12n+1) {
      clear: both; } }

@media only screen and (min-width:64.063em) {
  .large-block-grid-1 > li {
    width: 100%;
    padding: 0 0.625rem 1.25rem;
    list-style: none; }
    .large-block-grid-1 > li:nth-of-type(n) {
      clear: none; }
    .large-block-grid-1 > li:nth-of-type(1n+1) {
      clear: both; }
  .large-block-grid-2 > li {
    width: 50%;
    padding: 0 0.625rem 1.25rem;
    list-style: none; }
    .large-block-grid-2 > li:nth-of-type(n) {
      clear: none; }
    .large-block-grid-2 > li:nth-of-type(2n+1) {
      clear: both; }
  .large-block-grid-3 > li {
    width: 33.33333%;
    padding: 0 0.625rem 1.25rem;
    list-style: none; }
    .large-block-grid-3 > li:nth-of-type(n) {
      clear: none; }
    .large-block-grid-3 > li:nth-of-type(3n+1) {
      clear: both; }
  .large-block-grid-4 > li {
    width: 25%;
    padding: 0 0.625rem 1.25rem;
    list-style: none; }
    .large-block-grid-4 > li:nth-of-type(n) {
      clear: none; }
    .large-block-grid-4 > li:nth-of-type(4n+1) {
      clear: both; }
  .large-block-grid-5 > li {
    width: 20%;
    padding: 0 0.625rem 1.25rem;
    list-style: none; }
    .large-block-grid-5 > li:nth-of-type(n) {
      clear: none; }
    .large-block-grid-5 > li:nth-of-type(5n+1) {
      clear: both; }
  .large-block-grid-6 > li {
    width: 16.66667%;
    padding: 0 0.625rem 1.25rem;
    list-style: none; }
    .large-block-grid-6 > li:nth-of-type(n) {
      clear: none; }
    .large-block-grid-6 > li:nth-of-type(6n+1) {
      clear: both; }
  .large-block-grid-7 > li {
    width: 14.28571%;
    padding: 0 0.625rem 1.25rem;
    list-style: none; }
    .large-block-grid-7 > li:nth-of-type(n) {
      clear: none; }
    .large-block-grid-7 > li:nth-of-type(7n+1) {
      clear: both; }
  .large-block-grid-8 > li {
    width: 12.5%;
    padding: 0 0.625rem 1.25rem;
    list-style: none; }
    .large-block-grid-8 > li:nth-of-type(n) {
      clear: none; }
    .large-block-grid-8 > li:nth-of-type(8n+1) {
      clear: both; }
  .large-block-grid-9 > li {
    width: 11.11111%;
    padding: 0 0.625rem 1.25rem;
    list-style: none; }
    .large-block-grid-9 > li:nth-of-type(n) {
      clear: none; }
    .large-block-grid-9 > li:nth-of-type(9n+1) {
      clear: both; }
  .large-block-grid-10 > li {
    width: 10%;
    padding: 0 0.625rem 1.25rem;
    list-style: none; }
    .large-block-grid-10 > li:nth-of-type(n) {
      clear: none; }
    .large-block-grid-10 > li:nth-of-type(10n+1) {
      clear: both; }
  .large-block-grid-11 > li {
    width: 9.09091%;
    padding: 0 0.625rem 1.25rem;
    list-style: none; }
    .large-block-grid-11 > li:nth-of-type(n) {
      clear: none; }
    .large-block-grid-11 > li:nth-of-type(11n+1) {
      clear: both; }
  .large-block-grid-12 > li {
    width: 8.33333%;
    padding: 0 0.625rem 1.25rem;
    list-style: none; }
    .large-block-grid-12 > li:nth-of-type(n) {
      clear: none; }
    .large-block-grid-12 > li:nth-of-type(12n+1) {
      clear: both; } }

.breadcrumbs {
  display: block;
  padding: 0.5625rem 0.875rem 0.5625rem;
  overflow: hidden;
  margin-left: 0;
  list-style: none;
  border-style: solid;
  border-width: 1px;
  background-color: #f4f4f4;
  border-color: gainsboro;
  -webkit-border-radius: 3px;
  border-radius: 3px; }
  .breadcrumbs > * {
    margin: 0;
    float: left;
    font-size: 0.6875rem;
    text-transform: uppercase; }
    .breadcrumbs > *:hover a, .breadcrumbs > *:focus a {
      text-decoration: underline; }
    .breadcrumbs > * a, .breadcrumbs > * span {
      text-transform: uppercase;
      color: #008cba; }
    .breadcrumbs > *.current {
      cursor: default;
      color: #333333; }
      .breadcrumbs > *.current a {
        cursor: default;
        color: #333333; }
      .breadcrumbs > *.current:hover, .breadcrumbs > *.current:hover a, .breadcrumbs > *.current:focus, .breadcrumbs > *.current:focus a {
        text-decoration: none; }
    .breadcrumbs > *.unavailable {
      color: #999999; }
      .breadcrumbs > *.unavailable a {
        color: #999999; }
      .breadcrumbs > *.unavailable:hover, .breadcrumbs > *.unavailable:hover a, .breadcrumbs > *.unavailable:focus, .breadcrumbs > *.unavailable a:focus {
        text-decoration: none;
        color: #999999;
        cursor: default; }
    .breadcrumbs > *:before {
      content: "/";
      color: #aaaaaa;
      margin: 0 0.75rem;
      position: relative;
      top: 1px; }
    .breadcrumbs > *:first-child:before {
      content: " ";
      margin: 0; }

button, #action-bar a, .button {
  border-style: solid;
  border-width: 0px;
  cursor: pointer;
  font-family: "Helvetica Neue", "Helvetica", Helvetica, Arial, sans-serif;
  font-weight: normal;
  line-height: normal;
  margin: 0 0 0px;
  position: relative;
  text-decoration: none;
  text-align: center;
  display: inline-block;
  padding-top: 1rem;
  padding-right: 2rem;
  padding-bottom: 1.0625rem;
  padding-left: 2rem;
  font-size: 1rem;
  /*     @else                            { font-size: $padding - rem-calc(2); } */
  background-color: #008cba;
  border-color: #007295;
  color: white;
  -webkit-transition: background-color 300ms ease-out;
  -moz-transition: background-color 300ms ease-out;
  transition: background-color 300ms ease-out;
  padding-top: 1.0625rem;
  padding-bottom: 1rem;
  -webkit-appearance: none;
  border: none;
  font-weight: normal !important; }
  button:hover, button:focus, .button:hover, .button:focus {
    background-color: #007295; }
  button:hover, button:focus, .button:hover, .button:focus {
    color: white; }
  button.secondary, .button.secondary {
    background-color: #e7e7e7;
    border-color: #b9b9b9;
    color: #333333; }
    button.secondary:hover, button.secondary:focus, .button.secondary:hover, .button.secondary:focus {
      background-color: #b9b9b9; }
    button.secondary:hover, button.secondary:focus, .button.secondary:hover, .button.secondary:focus {
      color: #333333; }
  button.success, .button.success {
    background-color: #43ac6a;
    border-color: #368a54;
    color: white; }
    button.success:hover, button.success:focus, .button.success:hover, .button.success:focus {
      background-color: #368a54; }
    button.success:hover, button.success:focus, .button.success:hover, .button.success:focus {
      color: white; }
  button.alert, .button.alert {
    background-color: #f04124;
    border-color: #cf280e;
    color: white; }
    button.alert:hover, button.alert:focus, .button.alert:hover, .button.alert:focus {
      background-color: #cf280e; }
    button.alert:hover, button.alert:focus, .button.alert:hover, .button.alert:focus {
      color: white; }
  button.large, .button.large {
    padding-top: 1.125rem;
    padding-right: 2.25rem;
    padding-bottom: 1.1875rem;
    padding-left: 2.25rem;
    font-size: 1.25rem;
    /*     @else                            { font-size: $padding - rem-calc(2); } */ }
  button.small, .button.small {
    padding-top: 0.625rem;
    padding-right: 1.25rem;
    padding-bottom: 0.6875rem;
    padding-left: 1.25rem;
    font-size: 0.875rem;
    /*     @else                            { font-size: $padding - rem-calc(2); } */ }
  button.tiny, .button.tiny {
    padding-top: 0.375rem;
    padding-right: 0.75rem;
    padding-bottom: 0.4375rem;
    padding-left: 0.75rem;
    font-size: 0.75rem;
    /*     @else                            { font-size: $padding - rem-calc(2); } */ }
  button.expand, .button.expand {
    padding-right: 0;
    padding-left: 0;
    width: 100%; }
  button.left-align, .button.left-align {
    text-align: left;
    text-indent: 0.75rem; }
  button.right-align, .button.right-align {
    text-align: right;
    padding-right: 0.75rem; }
  button.radius, .button.radius {
    -webkit-border-radius: 3px;
    border-radius: 3px; }
  button.round, .button.round {
    -webkit-border-radius: 1000px;
    border-radius: 1000px; }
  button.disabled, button[disabled], .button.disabled, .button[disabled] {
    background-color: #008cba;
    border-color: #007295;
    color: white;
    cursor: default;
    opacity: 0.7;
    -webkit-box-shadow: none;
    box-shadow: none; }
    button.disabled:hover, button.disabled:focus, button[disabled]:hover, button[disabled]:focus, .button.disabled:hover, .button.disabled:focus, .button[disabled]:hover, .button[disabled]:focus {
      background-color: #007295; }
    button.disabled:hover, button.disabled:focus, button[disabled]:hover, button[disabled]:focus, .button.disabled:hover, .button.disabled:focus, .button[disabled]:hover, .button[disabled]:focus {
      color: white; }
    button.disabled:hover, button.disabled:focus, button[disabled]:hover, button[disabled]:focus, .button.disabled:hover, .button.disabled:focus, .button[disabled]:hover, .button[disabled]:focus {
      background-color: #008cba; }
    button.disabled.secondary, button[disabled].secondary, .button.disabled.secondary, .button[disabled].secondary {
      background-color: #e7e7e7;
      border-color: #b9b9b9;
      color: #333333;
      cursor: default;
      opacity: 0.7;
      -webkit-box-shadow: none;
      box-shadow: none; }
      button.disabled.secondary:hover, button.disabled.secondary:focus, button[disabled].secondary:hover, button[disabled].secondary:focus, .button.disabled.secondary:hover, .button.disabled.secondary:focus, .button[disabled].secondary:hover, .button[disabled].secondary:focus {
        background-color: #b9b9b9; }
      button.disabled.secondary:hover, button.disabled.secondary:focus, button[disabled].secondary:hover, button[disabled].secondary:focus, .button.disabled.secondary:hover, .button.disabled.secondary:focus, .button[disabled].secondary:hover, .button[disabled].secondary:focus {
        color: #333333; }
      button.disabled.secondary:hover, button.disabled.secondary:focus, button[disabled].secondary:hover, button[disabled].secondary:focus, .button.disabled.secondary:hover, .button.disabled.secondary:focus, .button[disabled].secondary:hover, .button[disabled].secondary:focus {
        background-color: #e7e7e7; }
    button.disabled.success, button[disabled].success, .button.disabled.success, .button[disabled].success {
      background-color: #43ac6a;
      border-color: #368a54;
      color: white;
      cursor: default;
      opacity: 0.7;
      -webkit-box-shadow: none;
      box-shadow: none; }
      button.disabled.success:hover, button.disabled.success:focus, button[disabled].success:hover, button[disabled].success:focus, .button.disabled.success:hover, .button.disabled.success:focus, .button[disabled].success:hover, .button[disabled].success:focus {
        background-color: #368a54; }
      button.disabled.success:hover, button.disabled.success:focus, button[disabled].success:hover, button[disabled].success:focus, .button.disabled.success:hover, .button.disabled.success:focus, .button[disabled].success:hover, .button[disabled].success:focus {
        color: white; }
      button.disabled.success:hover, button.disabled.success:focus, button[disabled].success:hover, button[disabled].success:focus, .button.disabled.success:hover, .button.disabled.success:focus, .button[disabled].success:hover, .button[disabled].success:focus {
        background-color: #43ac6a; }
    button.disabled.alert, button[disabled].alert, .button.disabled.alert, .button[disabled].alert {
      background-color: #f04124;
      border-color: #cf280e;
      color: white;
      cursor: default;
      opacity: 0.7;
      -webkit-box-shadow: none;
      box-shadow: none; }
      button.disabled.alert:hover, button.disabled.alert:focus, button[disabled].alert:hover, button[disabled].alert:focus, .button.disabled.alert:hover, .button.disabled.alert:focus, .button[disabled].alert:hover, .button[disabled].alert:focus {
        background-color: #cf280e; }
      button.disabled.alert:hover, button.disabled.alert:focus, button[disabled].alert:hover, button[disabled].alert:focus, .button.disabled.alert:hover, .button.disabled.alert:focus, .button[disabled].alert:hover, .button[disabled].alert:focus {
        color: white; }
      button.disabled.alert:hover, button.disabled.alert:focus, button[disabled].alert:hover, button[disabled].alert:focus, .button.disabled.alert:hover, .button.disabled.alert:focus, .button[disabled].alert:hover, .button[disabled].alert:focus {
        background-color: #f04124; }

@media only screen and (min-width:40.063em) {
  button, #action-bar a, .button {
    display: inline-block; } }

.button-group {
  list-style: none;
  margin: 0;
  *zoom: 1; }
  .button-group:before, .button-group:after {
    content: " ";
    display: table; }
  .button-group:after {
    clear: both; }
  .button-group > * {
    margin: 0;
    float: left; }
    .button-group > * > button, .button-group > * > #action-bar a, #action-bar .button-group > * > a, .button-group > * .button {
      border-right: 1px solid;
      border-color: rgba(255, 255, 255, 0.5); }
    .button-group > *:last-child button, .button-group > *:last-child #action-bar a, #action-bar .button-group > *:last-child a, .button-group > *:last-child .button {
      border-right: 0; }
    .button-group > *:first-child {
      margin-left: 0; }
  .button-group.radius > * > button, .button-group.radius > * > #action-bar a, #action-bar .button-group.radius > * > a, .button-group.radius > * .button {
    border-right: 1px solid;
    border-color: rgba(255, 255, 255, 0.5); }
  .button-group.radius > *:last-child button, .button-group.radius > *:last-child #action-bar a, #action-bar .button-group.radius > *:last-child a, .button-group.radius > *:last-child .button {
    border-right: 0; }
  .button-group.radius > *:first-child, .button-group.radius > *:first-child > a, .button-group.radius > *:first-child > button, .button-group.radius > *:first-child > #action-bar a, #action-bar .button-group.radius > *:first-child > a, .button-group.radius > *:first-child > .button {
    -moz-border-radius-bottomleft: 3px;
    -moz-border-radius-topleft: 3px;
    -webkit-border-bottom-left-radius: 3px;
    -webkit-border-top-left-radius: 3px;
    border-bottom-left-radius: 3px;
    border-top-left-radius: 3px; }
  .button-group.radius > *:last-child, .button-group.radius > *:last-child > a, .button-group.radius > *:last-child > button, .button-group.radius > *:last-child > #action-bar a, #action-bar .button-group.radius > *:last-child > a, .button-group.radius > *:last-child > .button {
    -moz-border-radius-topright: 3px;
    -moz-border-radius-bottomright: 3px;
    -webkit-border-top-right-radius: 3px;
    -webkit-border-bottom-right-radius: 3px;
    border-top-right-radius: 3px;
    border-bottom-right-radius: 3px; }
  .button-group.round > * > button, .button-group.round > * > #action-bar a, #action-bar .button-group.round > * > a, .button-group.round > * .button {
    border-right: 1px solid;
    border-color: rgba(255, 255, 255, 0.5); }
  .button-group.round > *:last-child button, .button-group.round > *:last-child #action-bar a, #action-bar .button-group.round > *:last-child a, .button-group.round > *:last-child .button {
    border-right: 0; }
  .button-group.round > *:first-child, .button-group.round > *:first-child > a, .button-group.round > *:first-child > button, .button-group.round > *:first-child > #action-bar a, #action-bar .button-group.round > *:first-child > a, .button-group.round > *:first-child > .button {
    -moz-border-radius-bottomleft: 1000px;
    -moz-border-radius-topleft: 1000px;
    -webkit-border-bottom-left-radius: 1000px;
    -webkit-border-top-left-radius: 1000px;
    border-bottom-left-radius: 1000px;
    border-top-left-radius: 1000px; }
  .button-group.round > *:last-child, .button-group.round > *:last-child > a, .button-group.round > *:last-child > button, .button-group.round > *:last-child > #action-bar a, #action-bar .button-group.round > *:last-child > a, .button-group.round > *:last-child > .button {
    -moz-border-radius-topright: 1000px;
    -moz-border-radius-bottomright: 1000px;
    -webkit-border-top-right-radius: 1000px;
    -webkit-border-bottom-right-radius: 1000px;
    border-top-right-radius: 1000px;
    border-bottom-right-radius: 1000px; }
  .button-group.even-2 li {
    width: 50%; }
    .button-group.even-2 li > button, .button-group.even-2 li > #action-bar a, #action-bar .button-group.even-2 li > a, .button-group.even-2 li .button {
      border-right: 1px solid;
      border-color: rgba(255, 255, 255, 0.5); }
    .button-group.even-2 li:last-child button, .button-group.even-2 li:last-child #action-bar a, #action-bar .button-group.even-2 li:last-child a, .button-group.even-2 li:last-child .button {
      border-right: 0; }
    .button-group.even-2 li button, .button-group.even-2 li #action-bar a, #action-bar .button-group.even-2 li a, .button-group.even-2 li .button {
      width: 100%; }
  .button-group.even-3 li {
    width: 33.33333%; }
    .button-group.even-3 li > button, .button-group.even-3 li > #action-bar a, #action-bar .button-group.even-3 li > a, .button-group.even-3 li .button {
      border-right: 1px solid;
      border-color: rgba(255, 255, 255, 0.5); }
    .button-group.even-3 li:last-child button, .button-group.even-3 li:last-child #action-bar a, #action-bar .button-group.even-3 li:last-child a, .button-group.even-3 li:last-child .button {
      border-right: 0; }
    .button-group.even-3 li button, .button-group.even-3 li #action-bar a, #action-bar .button-group.even-3 li a, .button-group.even-3 li .button {
      width: 100%; }
  .button-group.even-4 li {
    width: 25%; }
    .button-group.even-4 li > button, .button-group.even-4 li > #action-bar a, #action-bar .button-group.even-4 li > a, .button-group.even-4 li .button {
      border-right: 1px solid;
      border-color: rgba(255, 255, 255, 0.5); }
    .button-group.even-4 li:last-child button, .button-group.even-4 li:last-child #action-bar a, #action-bar .button-group.even-4 li:last-child a, .button-group.even-4 li:last-child .button {
      border-right: 0; }
    .button-group.even-4 li button, .button-group.even-4 li #action-bar a, #action-bar .button-group.even-4 li a, .button-group.even-4 li .button {
      width: 100%; }
  .button-group.even-5 li {
    width: 20%; }
    .button-group.even-5 li > button, .button-group.even-5 li > #action-bar a, #action-bar .button-group.even-5 li > a, .button-group.even-5 li .button {
      border-right: 1px solid;
      border-color: rgba(255, 255, 255, 0.5); }
    .button-group.even-5 li:last-child button, .button-group.even-5 li:last-child #action-bar a, #action-bar .button-group.even-5 li:last-child a, .button-group.even-5 li:last-child .button {
      border-right: 0; }
    .button-group.even-5 li button, .button-group.even-5 li #action-bar a, #action-bar .button-group.even-5 li a, .button-group.even-5 li .button {
      width: 100%; }
  .button-group.even-6 li {
    width: 16.66667%; }
    .button-group.even-6 li > button, .button-group.even-6 li > #action-bar a, #action-bar .button-group.even-6 li > a, .button-group.even-6 li .button {
      border-right: 1px solid;
      border-color: rgba(255, 255, 255, 0.5); }
    .button-group.even-6 li:last-child button, .button-group.even-6 li:last-child #action-bar a, #action-bar .button-group.even-6 li:last-child a, .button-group.even-6 li:last-child .button {
      border-right: 0; }
    .button-group.even-6 li button, .button-group.even-6 li #action-bar a, #action-bar .button-group.even-6 li a, .button-group.even-6 li .button {
      width: 100%; }
  .button-group.even-7 li {
    width: 14.28571%; }
    .button-group.even-7 li > button, .button-group.even-7 li > #action-bar a, #action-bar .button-group.even-7 li > a, .button-group.even-7 li .button {
      border-right: 1px solid;
      border-color: rgba(255, 255, 255, 0.5); }
    .button-group.even-7 li:last-child button, .button-group.even-7 li:last-child #action-bar a, #action-bar .button-group.even-7 li:last-child a, .button-group.even-7 li:last-child .button {
      border-right: 0; }
    .button-group.even-7 li button, .button-group.even-7 li #action-bar a, #action-bar .button-group.even-7 li a, .button-group.even-7 li .button {
      width: 100%; }
  .button-group.even-8 li {
    width: 12.5%; }
    .button-group.even-8 li > button, .button-group.even-8 li > #action-bar a, #action-bar .button-group.even-8 li > a, .button-group.even-8 li .button {
      border-right: 1px solid;
      border-color: rgba(255, 255, 255, 0.5); }
    .button-group.even-8 li:last-child button, .button-group.even-8 li:last-child #action-bar a, #action-bar .button-group.even-8 li:last-child a, .button-group.even-8 li:last-child .button {
      border-right: 0; }
    .button-group.even-8 li button, .button-group.even-8 li #action-bar a, #action-bar .button-group.even-8 li a, .button-group.even-8 li .button {
      width: 100%; }

.button-bar {
  *zoom: 1; }
  .button-bar:before, .button-bar:after {
    content: " ";
    display: table; }
  .button-bar:after {
    clear: both; }
  .button-bar .button-group {
    float: left;
    margin-right: 0.625rem; }
    .button-bar .button-group div {
      overflow: hidden; }

/* Clearing Styles */
[data-clearing] {
  *zoom: 1;
  margin-bottom: 0;
  margin-left: 0;
  list-style: none; }
  [data-clearing]:before, [data-clearing]:after {
    content: " ";
    display: table; }
  [data-clearing]:after {
    clear: both; }
  [data-clearing] li {
    float: left;
    margin-right: 10px; }

.clearing-blackout {
  background: #333333;
  position: fixed;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  z-index: 998; }
  .clearing-blackout .clearing-close {
    display: block; }

.clearing-container {
  position: relative;
  z-index: 998;
  height: 100%;
  overflow: hidden;
  margin: 0; }

.visible-img {
  height: 95%;
  position: relative; }
  .visible-img img {
    position: absolute;
    left: 50%;
    top: 50%;
    margin-left: -50%;
    max-height: 100%;
    max-width: 100%; }

.clearing-caption {
  color: #cccccc;
  font-size: 0.875em;
  line-height: 1.3;
  margin-bottom: 0;
  text-align: center;
  bottom: 0;
  background: #333333;
  width: 100%;
  padding: 10px 30px 20px;
  position: absolute;
  left: 0; }

.clearing-close {
  z-index: 999;
  padding-left: 20px;
  padding-top: 10px;
  font-size: 30px;
  line-height: 1;
  color: #cccccc;
  display: none; }
  .clearing-close:hover, .clearing-close:focus {
    color: #cccccc; }

.clearing-assembled .clearing-container {
  height: 100%; }
  .clearing-assembled .clearing-container .carousel > ul {
    display: none; }

.clearing-feature li {
  display: none; }
  .clearing-feature li.clearing-featured-img {
    display: block; }

@media only screen and (min-width:40.063em) {
  .clearing-main-prev, .clearing-main-next {
    position: absolute;
    height: 100%;
    width: 40px;
    top: 0; }
    .clearing-main-prev > span, .clearing-main-next > span {
      position: absolute;
      top: 50%;
      display: block;
      width: 0;
      height: 0;
      border: solid 12px; }
      .clearing-main-prev > span:hover, .clearing-main-next > span:hover {
        opacity: 0.8; }
  .clearing-main-prev {
    left: 0; }
    .clearing-main-prev > span {
      left: 5px;
      border-color: transparent;
      border-right-color: #cccccc; }
  .clearing-main-next {
    right: 0; }
    .clearing-main-next > span {
      border-color: transparent;
      border-left-color: #cccccc; }
  .clearing-main-prev.disabled, .clearing-main-next.disabled {
    opacity: 0.3; }
  .clearing-assembled .clearing-container .carousel {
    background: rgba(51, 51, 51, 0.8);
    height: 120px;
    margin-top: 10px;
    text-align: center; }
    .clearing-assembled .clearing-container .carousel > ul {
      display: inline-block;
      z-index: 999;
      height: 100%;
      position: relative;
      float: none; }
      .clearing-assembled .clearing-container .carousel > ul li {
        display: block;
        width: 120px;
        min-height: inherit;
        float: left;
        overflow: hidden;
        margin-right: 0;
        padding: 0;
        position: relative;
        cursor: pointer;
        opacity: 0.4; }
        .clearing-assembled .clearing-container .carousel > ul li.fix-height img {
          height: 100%;
          max-width: none; }
        .clearing-assembled .clearing-container .carousel > ul li a.th {
          border: none;
          -webkit-box-shadow: none;
          box-shadow: none;
          display: block; }
        .clearing-assembled .clearing-container .carousel > ul li img {
          cursor: pointer !important;
          width: 100% !important; }
        .clearing-assembled .clearing-container .carousel > ul li.visible {
          opacity: 1; }
        .clearing-assembled .clearing-container .carousel > ul li:hover {
          opacity: 0.8; }
  .clearing-assembled .clearing-container .visible-img {
    background: #333333;
    overflow: hidden;
    height: 85%; }
  .clearing-close {
    position: absolute;
    top: 10px;
    right: 20px;
    padding-left: 0;
    padding-top: 0; } }

@media only screen and (max-width: 40em) {
  .f-dropdown {
    max-width: 100%;
    left: 0; } }

/* Foundation Dropdowns */
.f-dropdown {
  position: absolute;
  left: -9999px;
  list-style: none;
  margin-left: 0;
  width: 100%;
  max-height: none;
  height: auto;
  background: white;
  border: solid 1px #cccccc;
  font-size: 16px;
  z-index: 99;
  margin-top: 2px;
  max-width: 200px; }
  .f-dropdown > *:first-child {
    margin-top: 0; }
  .f-dropdown > *:last-child {
    margin-bottom: 0; }
  .f-dropdown:before {
    content: "";
    display: block;
    width: 0;
    height: 0;
    border: inset 6px;
    border-color: transparent transparent white transparent;
    border-bottom-style: solid;
    position: absolute;
    top: -12px;
    left: 10px;
    z-index: 99; }
  .f-dropdown:after {
    content: "";
    display: block;
    width: 0;
    height: 0;
    border: inset 7px;
    border-color: transparent transparent #cccccc transparent;
    border-bottom-style: solid;
    position: absolute;
    top: -14px;
    left: 9px;
    z-index: 98; }
  .f-dropdown.right:before {
    left: auto;
    right: 10px; }
  .f-dropdown.right:after {
    left: auto;
    right: 9px; }
  .f-dropdown li {
    font-size: 0.875rem;
    cursor: pointer;
    line-height: 1.125rem;
    margin: 0; }
    .f-dropdown li:hover, .f-dropdown li:focus {
      background: #eeeeee; }
    .f-dropdown li a {
      display: block;
      padding: 0.5rem;
      color: #555555; }
  .f-dropdown.content {
    position: absolute;
    left: -9999px;
    list-style: none;
    margin-left: 0;
    padding: 1.25rem;
    width: 100%;
    height: auto;
    max-height: none;
    background: white;
    border: solid 1px #cccccc;
    font-size: 16px;
    z-index: 99;
    max-width: 200px; }
    .f-dropdown.content > *:first-child {
      margin-top: 0; }
    .f-dropdown.content > *:last-child {
      margin-bottom: 0; }
  .f-dropdown.tiny {
    max-width: 200px; }
  .f-dropdown.small {
    max-width: 300px; }
  .f-dropdown.medium {
    max-width: 500px; }
  .f-dropdown.large {
    max-width: 800px; }

.dropdown.button {
  position: relative;
  padding-right: 3.5625rem; }
  .dropdown.button:before {
    position: absolute;
    content: "";
    width: 0;
    height: 0;
    display: block;
    border-style: solid;
    border-color: white transparent transparent transparent;
    top: 50%; }
  .dropdown.button:before {
    border-width: 0.375rem;
    right: 1.40625rem;
    margin-top: -0.15625rem; }
  .dropdown.button:before {
    border-color: white transparent transparent transparent; }
  .dropdown.button.tiny {
    padding-right: 2.625rem; }
    .dropdown.button.tiny:before {
      border-width: 0.375rem;
      right: 1.125rem;
      margin-top: -0.125rem; }
    .dropdown.button.tiny:before {
      border-color: white transparent transparent transparent; }
  .dropdown.button.small {
    padding-right: 3.0625rem; }
    .dropdown.button.small:before {
      border-width: 0.4375rem;
      right: 1.3125rem;
      margin-top: -0.15625rem; }
    .dropdown.button.small:before {
      border-color: white transparent transparent transparent; }
  .dropdown.button.large {
    padding-right: 3.625rem; }
    .dropdown.button.large:before {
      border-width: 0.3125rem;
      right: 1.71875rem;
      margin-top: -0.15625rem; }
    .dropdown.button.large:before {
      border-color: white transparent transparent transparent; }
  .dropdown.button.secondary:before {
    border-color: #333333 transparent transparent transparent; }

.flex-video {
  position: relative;
  padding-top: 1.5625rem;
  padding-bottom: 67.5%;
  height: 0;
  margin-bottom: 1rem;
  overflow: hidden; }
  .flex-video.widescreen {
    padding-bottom: 57.25%; }
  .flex-video.vimeo {
    padding-top: 0; }
  .flex-video iframe, .flex-video object, .flex-video embed, .flex-video video {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%; }

/* Standard Forms */
form {
  margin: 0 0 1rem; }

/* Using forms within rows, we need to set some defaults */
form .row .row {
  margin: 0 -0.5rem; }
  form .row .row .column, form .row .row .columns {
    padding: 0 0.5rem; }
  form .row .row.collapse {
    margin: 0; }
    form .row .row.collapse .column, form .row .row.collapse .columns {
      padding: 0; }
    form .row .row.collapse input {
      -moz-border-radius-bottomright: 0;
      -moz-border-radius-topright: 0;
      -webkit-border-bottom-right-radius: 0;
      -webkit-border-top-right-radius: 0; }
form .row input.column, form .row input.columns, form .row textarea.column, form .row textarea.columns {
  padding-left: 0.5rem; }

/* Label Styles */
label {
  font-size: 0.875rem;
  color: #4d4d4d;
  cursor: pointer;
  display: block;
  font-weight: normal;
  margin-bottom: 0.5rem;
  /* Styles for required inputs */ }
  label.right {
    float: none;
    text-align: right; }
  label.inline {
    margin: 0 0 1rem 0;
    padding: 0.625rem 0; }
  label small {
    text-transform: capitalize;
    color: #686868; }

select {
  -webkit-appearance: none !important;
  background: #fafafa url('data:image/svg+xml;base64, PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZlcnNpb249IjEuMSIgeD0iMHB4IiB5PSIwcHgiIHdpZHRoPSI2cHgiIGhlaWdodD0iM3B4IiB2aWV3Qm94PSIwIDAgNiAzIiBlbmFibGUtYmFja2dyb3VuZD0ibmV3IDAgMCA2IDMiIHhtbDpzcGFjZT0icHJlc2VydmUiPjxwb2x5Z29uIHBvaW50cz0iNS45OTIsMCAyLjk5MiwzIC0wLjAwOCwwICIvPjwvc3ZnPg==') no-repeat;
  background-position-x: 97%;
  background-position-y: center;
  border: 1px solid #cccccc;
  padding: 0.5rem;
  font-size: 0.875rem;
  -webkit-border-radius: 0;
  border-radius: 0; }
  select.radius {
    -webkit-border-radius: 3px;
    border-radius: 3px; }
  select:hover {
    background: #f3f3f3 url('data:image/svg+xml;base64, PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZlcnNpb249IjEuMSIgeD0iMHB4IiB5PSIwcHgiIHdpZHRoPSI2cHgiIGhlaWdodD0iM3B4IiB2aWV3Qm94PSIwIDAgNiAzIiBlbmFibGUtYmFja2dyb3VuZD0ibmV3IDAgMCA2IDMiIHhtbDpzcGFjZT0icHJlc2VydmUiPjxwb2x5Z29uIHBvaW50cz0iNS45OTIsMCAyLjk5MiwzIC0wLjAwOCwwICIvPjwvc3ZnPg==') no-repeat;
    background-position-x: 97%;
    background-position-y: center;
    border-color: #999999; }

select::-ms-expand {
  display: none; }

@-moz-document url-prefix() {
  select {
    background: #fafafa; }

  select:hover {
    background: #f3f3f3; } }

/* Attach elements to the beginning or end of an input */
.prefix, .postfix {
  display: block;
  position: relative;
  z-index: 2;
  text-align: center;
  width: 100%;
  padding-top: 0;
  padding-bottom: 0;
  border-style: solid;
  border-width: 1px;
  overflow: hidden;
  font-size: 0.875rem;
  height: 2.3125rem;
  line-height: 2.3125rem; }

/* Adjust padding, alignment and radius if pre/post element is a button */
.postfix.button {
  padding-left: 0;
  padding-right: 0;
  padding-top: 0;
  padding-bottom: 0;
  text-align: center;
  line-height: 2.125rem;
  border: none; }

.prefix.button {
  padding-left: 0;
  padding-right: 0;
  padding-top: 0;
  padding-bottom: 0;
  text-align: center;
  line-height: 2.125rem;
  border: none; }

.prefix.button.radius {
  -webkit-border-radius: 0;
  border-radius: 0;
  -moz-border-radius-bottomleft: 3px;
  -moz-border-radius-topleft: 3px;
  -webkit-border-bottom-left-radius: 3px;
  -webkit-border-top-left-radius: 3px;
  border-bottom-left-radius: 3px;
  border-top-left-radius: 3px; }

.postfix.button.radius {
  -webkit-border-radius: 0;
  border-radius: 0;
  -moz-border-radius-topright: 3px;
  -moz-border-radius-bottomright: 3px;
  -webkit-border-top-right-radius: 3px;
  -webkit-border-bottom-right-radius: 3px;
  border-top-right-radius: 3px;
  border-bottom-right-radius: 3px; }

.prefix.button.round {
  -webkit-border-radius: 0;
  border-radius: 0;
  -moz-border-radius-bottomleft: 1000px;
  -moz-border-radius-topleft: 1000px;
  -webkit-border-bottom-left-radius: 1000px;
  -webkit-border-top-left-radius: 1000px;
  border-bottom-left-radius: 1000px;
  border-top-left-radius: 1000px; }

.postfix.button.round {
  -webkit-border-radius: 0;
  border-radius: 0;
  -moz-border-radius-topright: 1000px;
  -moz-border-radius-bottomright: 1000px;
  -webkit-border-top-right-radius: 1000px;
  -webkit-border-bottom-right-radius: 1000px;
  border-top-right-radius: 1000px;
  border-bottom-right-radius: 1000px; }

/* Separate prefix and postfix styles when on span or label so buttons keep their own */
span.prefix, label.prefix {
  background: #f2f2f2;
  border-color: #d7d7d7;
  border-right: none;
  color: #333333; }
  span.prefix.radius, label.prefix.radius {
    -webkit-border-radius: 0;
    border-radius: 0;
    -moz-border-radius-bottomleft: 3px;
    -moz-border-radius-topleft: 3px;
    -webkit-border-bottom-left-radius: 3px;
    -webkit-border-top-left-radius: 3px;
    border-bottom-left-radius: 3px;
    border-top-left-radius: 3px; }

span.postfix, label.postfix {
  background: #f2f2f2;
  border-color: #cbcbcb;
  border-left: none;
  color: #333333; }
  span.postfix.radius, label.postfix.radius {
    -webkit-border-radius: 0;
    border-radius: 0;
    -moz-border-radius-topright: 3px;
    -moz-border-radius-bottomright: 3px;
    -webkit-border-top-right-radius: 3px;
    -webkit-border-bottom-right-radius: 3px;
    border-top-right-radius: 3px;
    border-bottom-right-radius: 3px; }

/* Input groups will automatically style first and last elements of the group */
.input-group.radius > *:first-child, .input-group.radius > *:first-child * {
  -moz-border-radius-bottomleft: 3px;
  -moz-border-radius-topleft: 3px;
  -webkit-border-bottom-left-radius: 3px;
  -webkit-border-top-left-radius: 3px;
  border-bottom-left-radius: 3px;
  border-top-left-radius: 3px; }
.input-group.radius > *:last-child, .input-group.radius > *:last-child * {
  -moz-border-radius-topright: 3px;
  -moz-border-radius-bottomright: 3px;
  -webkit-border-top-right-radius: 3px;
  -webkit-border-bottom-right-radius: 3px;
  border-top-right-radius: 3px;
  border-bottom-right-radius: 3px; }
.input-group.round > *:first-child, .input-group.round > *:first-child * {
  -moz-border-radius-bottomleft: 1000px;
  -moz-border-radius-topleft: 1000px;
  -webkit-border-bottom-left-radius: 1000px;
  -webkit-border-top-left-radius: 1000px;
  border-bottom-left-radius: 1000px;
  border-top-left-radius: 1000px; }
.input-group.round > *:last-child, .input-group.round > *:last-child * {
  -moz-border-radius-topright: 1000px;
  -moz-border-radius-bottomright: 1000px;
  -webkit-border-top-right-radius: 1000px;
  -webkit-border-bottom-right-radius: 1000px;
  border-top-right-radius: 1000px;
  border-bottom-right-radius: 1000px; }

/* We use this to get basic styling on all basic form elements */
input[type="text"], input[type="password"], input[type="date"], input[type="datetime"], input[type="datetime-local"], input[type="month"], input[type="week"], input[type="email"], input[type="number"], input[type="search"], input[type="tel"], input[type="time"], input[type="url"], textarea, #newPostForm x-richtexteditor {
  -webkit-appearance: none;
  -webkit-border-radius: 0;
  border-radius: 0;
  background-color: white;
  font-family: inherit;
  border: 1px solid #cccccc;
  -webkit-box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
  box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
  color: rgba(0, 0, 0, 0.75);
  display: block;
  font-size: 0.875rem;
  margin: 0 0 1rem 0;
  padding: 0.5rem;
  height: 2.3125rem;
  width: 100%;
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  -webkit-transition: -webkit-box-shadow 0.45s, border-color 0.45s ease-in-out;
  -moz-transition: -moz-box-shadow 0.45s, border-color 0.45s ease-in-out;
  transition: box-shadow 0.45s, border-color 0.45s ease-in-out;
  -webkit-transition: all 0.15s linear;
  -moz-transition: all 0.15s linear;
  transition: all 0.15s linear; }
  input[type="text"]:focus, input[type="password"]:focus, input[type="date"]:focus, input[type="datetime"]:focus, input[type="datetime-local"]:focus, input[type="month"]:focus, input[type="week"]:focus, input[type="email"]:focus, input[type="number"]:focus, input[type="search"]:focus, input[type="tel"]:focus, input[type="time"]:focus, input[type="url"]:focus, textarea:focus {
    -webkit-box-shadow: 0 0 5px #999999;
    -moz-box-shadow: 0 0 5px #999999;
    box-shadow: 0 0 5px #999999;
    border-color: #999999; }
  input[type="text"]:focus, input[type="password"]:focus, input[type="date"]:focus, input[type="datetime"]:focus, input[type="datetime-local"]:focus, input[type="month"]:focus, input[type="week"]:focus, input[type="email"]:focus, input[type="number"]:focus, input[type="search"]:focus, input[type="tel"]:focus, input[type="time"]:focus, input[type="url"]:focus, textarea:focus {
    background: #fafafa;
    border-color: #999999;
    outline: none; }
  input[type="text"][disabled], input[type="password"][disabled], input[type="date"][disabled], input[type="datetime"][disabled], input[type="datetime-local"][disabled], input[type="month"][disabled], input[type="week"][disabled], input[type="email"][disabled], input[type="number"][disabled], input[type="search"][disabled], input[type="tel"][disabled], input[type="time"][disabled], input[type="url"][disabled], textarea[disabled] {
    background-color: #dddddd; }

/* Add height value for select elements to match text input height */
select {
  height: 2.3125rem; }

/* Adjust margin for form elements below */
input[type="file"], input[type="checkbox"], input[type="radio"], select {
  margin: 0 0 1rem 0; }

input[type="checkbox"] + label, input[type="radio"] + label {
  display: inline-block;
  margin-left: 0.5rem;
  margin-right: 1rem;
  margin-bottom: 0;
  vertical-align: baseline; }

/* Normalize file input width */
input[type="file"] {
  width: 100%; }

/* We add basic fieldset styling */
fieldset {
  border: solid 1px #dddddd;
  padding: 1.25rem;
  margin: 1.125rem 0; }
  fieldset legend {
    font-weight: bold;
    background: white;
    padding: 0 0.1875rem;
    margin: 0;
    margin-left: -0.1875rem; }

/* Error Handling */
[data-abide] .error small.error, [data-abide] span.error, [data-abide] small.error {
  display: block;
  padding: 0.375rem 0.5625rem 0.5625rem;
  margin-top: -1px;
  margin-bottom: 1rem;
  font-size: 0.75rem;
  font-weight: normal;
  font-style: italic;
  background: #f04124;
  color: white; }
[data-abide] span.error, [data-abide] small.error {
  display: none; }

span.error, small.error {
  display: block;
  padding: 0.375rem 0.5625rem 0.5625rem;
  margin-top: -1px;
  margin-bottom: 1rem;
  font-size: 0.75rem;
  font-weight: normal;
  font-style: italic;
  background: #f04124;
  color: white; }

.error input, .error textarea, .error #newPostForm x-richtexteditor, #newPostForm .error x-richtexteditor, .error select {
  margin-bottom: 0; }
.error label, .error label.error {
  color: #f04124; }
.error > small, .error small.error {
  display: block;
  padding: 0.375rem 0.5625rem 0.5625rem;
  margin-top: -1px;
  margin-bottom: 1rem;
  font-size: 0.75rem;
  font-weight: normal;
  font-style: italic;
  background: #f04124;
  color: white; }
.error > label > small {
  color: #686868;
  background: transparent;
  padding: 0;
  text-transform: capitalize;
  font-style: normal;
  font-size: 60%;
  margin: 0;
  display: inline; }
.error span.error-message {
  display: block; }

input.error, textarea.error {
  margin-bottom: 0; }

label.error {
  color: #f04124; }

.inline-list {
  margin: 0 auto 1.0625rem auto;
  margin-left: -1.375rem;
  margin-right: 0;
  padding: 0;
  list-style: none;
  overflow: hidden; }
  .inline-list > li {
    list-style: none;
    float: left;
    margin-left: 1.375rem;
    display: block; }
    .inline-list > li > * {
      display: block; }

/* Foundation Joyride */
.joyride-list {
  display: none; }

/* Default styles for the container */
.joyride-tip-guide {
  display: none;
  position: absolute;
  background: #333333;
  color: white;
  z-index: 101;
  top: 0;
  left: 2.5%;
  font-family: inherit;
  font-weight: normal;
  width: 95%; }

.lt-ie9 .joyride-tip-guide {
  max-width: 800px;
  left: 50%;
  margin-left: -400px; }

.joyride-content-wrapper {
  width: 100%;
  padding: 1.125rem 1.25rem 1.5rem; }
  .joyride-content-wrapper .button {
    margin-bottom: 0 !important; }

/* Add a little css triangle pip, older browser just miss out on the fanciness of it */
.joyride-tip-guide .joyride-nub {
  display: block;
  position: absolute;
  left: 22px;
  width: 0;
  height: 0;
  border: 10px solid #333333; }
  .joyride-tip-guide .joyride-nub.top {
    border-top-style: solid;
    border-color: #333333;
    border-top-color: transparent !important;
    border-left-color: transparent !important;
    border-right-color: transparent !important;
    top: -20px; }
  .joyride-tip-guide .joyride-nub.bottom {
    border-bottom-style: solid;
    border-color: #333333 !important;
    border-bottom-color: transparent !important;
    border-left-color: transparent !important;
    border-right-color: transparent !important;
    bottom: -20px; }
  .joyride-tip-guide .joyride-nub.right {
    right: -20px; }
  .joyride-tip-guide .joyride-nub.left {
    left: -20px; }

/* Typography */
.joyride-tip-guide h1, .joyride-tip-guide h2, .joyride-tip-guide h3, .joyride-tip-guide h4, .joyride-tip-guide h5, .joyride-tip-guide h6 {
  line-height: 1.25;
  margin: 0;
  font-weight: bold;
  color: white; }

.joyride-tip-guide p {
  margin: 0 0 1.125rem 0;
  font-size: 0.875rem;
  line-height: 1.3; }

.joyride-timer-indicator-wrap {
  width: 50px;
  height: 3px;
  border: solid 1px #555555;
  position: absolute;
  right: 1.0625rem;
  bottom: 1rem; }

.joyride-timer-indicator {
  display: block;
  width: 0;
  height: inherit;
  background: #666666; }

.joyride-close-tip {
  position: absolute;
  right: 12px;
  top: 10px;
  color: #777777 !important;
  text-decoration: none;
  font-size: 24px;
  font-weight: normal;
  line-height: 0.5 !important; }
  .joyride-close-tip:hover, .joyride-close-tip:focus {
    color: #eeeeee !important; }

.joyride-modal-bg {
  position: fixed;
  height: 100%;
  width: 100%;
  background: transparent;
  background: rgba(0, 0, 0, 0.5);
  z-index: 100;
  display: none;
  top: 0;
  left: 0;
  cursor: pointer; }

.joyride-expose-wrapper {
  background-color: white;
  position: absolute;
  border-radius: 3px;
  z-index: 102;
  -moz-box-shadow: 0 0 30px white;
  -webkit-box-shadow: 0 0 15px white;
  box-shadow: 0 0 15px white; }

.joyride-expose-cover {
  background: transparent;
  border-radius: 3px;
  position: absolute;
  z-index: 9999;
  top: 0;
  left: 0; }

/* Styles for screens that are atleast 768px; */
@media only screen and (min-width:40.063em) {
  .joyride-tip-guide {
    width: 300px;
    left: inherit; }
    .joyride-tip-guide .joyride-nub.bottom {
      border-color: #333333 !important;
      border-bottom-color: transparent !important;
      border-left-color: transparent !important;
      border-right-color: transparent !important;
      bottom: -20px; }
    .joyride-tip-guide .joyride-nub.right {
      border-color: #333333 !important;
      border-top-color: transparent !important;
      border-right-color: transparent !important;
      border-bottom-color: transparent !important;
      top: 22px;
      left: auto;
      right: -20px; }
    .joyride-tip-guide .joyride-nub.left {
      border-color: #333333 !important;
      border-top-color: transparent !important;
      border-left-color: transparent !important;
      border-bottom-color: transparent !important;
      top: 22px;
      left: -20px;
      right: auto; } }

.keystroke, kbd {
  background-color: #ededed;
  border-color: gainsboro;
  color: #222222;
  border-style: solid;
  border-width: 1px;
  margin: 0;
  font-family: "Consolas", "Menlo", "Courier", monospace;
  font-size: 0.875rem;
  padding: 0.125rem 0.25rem 0;
  -webkit-border-radius: 3px;
  border-radius: 3px; }

.label {
  font-weight: normal;
  font-family: "Helvetica Neue", "Helvetica", Helvetica, Arial, sans-serif;
  text-align: center;
  text-decoration: none;
  line-height: 1;
  white-space: nowrap;
  display: inline-block;
  position: relative;
  margin-bottom: inherit;
  padding: 0.25rem 0.5rem 0.375rem;
  font-size: 0.6875rem;
  background-color: #008cba;
  color: white; }
  .label.radius {
    -webkit-border-radius: 3px;
    border-radius: 3px; }
  .label.round {
    -webkit-border-radius: 1000px;
    border-radius: 1000px; }
  .label.alert {
    background-color: #f04124;
    color: white; }
  .label.success {
    background-color: #43ac6a;
    color: white; }
  .label.secondary {
    background-color: #e7e7e7;
    color: #333333; }

[data-magellan-expedition] {
  background: white;
  z-index: 50;
  min-width: 100%;
  padding: 10px; }
  [data-magellan-expedition] .sub-nav {
    margin-bottom: 0; }
    [data-magellan-expedition] .sub-nav dd {
      margin-bottom: 0; }
    [data-magellan-expedition] .sub-nav .active {
      line-height: 1.8em; }

@-webkit-keyframes rotate {
  from {
    -webkit-transform: rotate(0deg); }

  to {
    -webkit-transform: rotate(360deg); } }

@-moz-keyframes rotate {
  from {
    -moz-transform: rotate(0deg); }

  to {
    -moz-transform: rotate(360deg); } }

@-o-keyframes rotate {
  from {
    -o-transform: rotate(0deg); }

  to {
    -o-transform: rotate(360deg); } }

@keyframes rotate {
  from {
    transform: rotate(0deg); }

  to {
    transform: rotate(360deg); } }

/* Orbit Graceful Loading */
.slideshow-wrapper {
  position: relative; }
  .slideshow-wrapper ul {
    list-style-type: none;
    margin: 0; }
    .slideshow-wrapper ul li, .slideshow-wrapper ul li .orbit-caption {
      display: none; }
    .slideshow-wrapper ul li:first-child {
      display: block; }
  .slideshow-wrapper .orbit-container {
    background-color: transparent; }
    .slideshow-wrapper .orbit-container li {
      display: block; }
      .slideshow-wrapper .orbit-container li .orbit-caption {
        display: block; }

.preloader {
  display: block;
  width: 40px;
  height: 40px;
  position: absolute;
  top: 50%;
  left: 50%;
  margin-top: -20px;
  margin-left: -20px;
  border: solid 3px;
  border-color: #555555 white;
  -webkit-border-radius: 1000px;
  border-radius: 1000px;
  -webkit-animation-name: rotate;
  -webkit-animation-duration: 1.5s;
  -webkit-animation-iteration-count: infinite;
  -webkit-animation-timing-function: linear;
  -moz-animation-name: rotate;
  -moz-animation-duration: 1.5s;
  -moz-animation-iteration-count: infinite;
  -moz-animation-timing-function: linear;
  -o-animation-name: rotate;
  -o-animation-duration: 1.5s;
  -o-animation-iteration-count: infinite;
  -o-animation-timing-function: linear;
  animation-name: rotate;
  animation-duration: 1.5s;
  animation-iteration-count: infinite;
  animation-timing-function: linear; }

.orbit-container {
  overflow: hidden;
  width: 100%;
  position: relative;
  background: none; }
  .orbit-container .orbit-slides-container {
    list-style: none;
    margin: 0;
    padding: 0;
    position: relative; }
    .orbit-container .orbit-slides-container img {
      display: block;
      max-width: 100%; }
    .orbit-container .orbit-slides-container > * {
      position: absolute;
      top: 0;
      width: 100%;
      margin-left: 100%; }
      .orbit-container .orbit-slides-container > *:first-child {
        margin-left: 0%; }
      .orbit-container .orbit-slides-container > * .orbit-caption {
        position: absolute;
        bottom: 0;
        background-color: rgba(51, 51, 51, 0.8);
        color: white;
        width: 100%;
        padding: 0.625rem 0.875rem;
        font-size: 0.875rem; }
  .orbit-container .orbit-slide-number {
    position: absolute;
    top: 10px;
    left: 10px;
    font-size: 12px;
    color: white;
    background: rgba(0, 0, 0, 0);
    z-index: 10; }
    .orbit-container .orbit-slide-number span {
      font-weight: 700;
      padding: 0.3125rem; }
  .orbit-container .orbit-timer {
    position: absolute;
    top: 12px;
    right: 10px;
    height: 6px;
    width: 100px;
    z-index: 10; }
    .orbit-container .orbit-timer .orbit-progress {
      height: 3px;
      background-color: rgba(255, 255, 255, 0.3);
      display: block;
      width: 0%;
      position: relative;
      right: 20px;
      top: 5px; }
    .orbit-container .orbit-timer > span {
      display: none;
      position: absolute;
      top: 0px;
      right: 0;
      width: 11px;
      height: 14px;
      border: solid 4px white;
      border-top: none;
      border-bottom: none; }
    .orbit-container .orbit-timer.paused > span {
      right: -4px;
      top: 0px;
      width: 11px;
      height: 14px;
      border: inset 8px;
      border-right-style: solid;
      border-color: transparent transparent transparent white; }
      .orbit-container .orbit-timer.paused > span.dark {
        border-color: transparent transparent transparent #333333; }
  .orbit-container:hover .orbit-timer > span {
    display: block; }
  .orbit-container .orbit-prev, .orbit-container .orbit-next {
    position: absolute;
    top: 45%;
    margin-top: -25px;
    width: 36px;
    height: 60px;
    line-height: 50px;
    color: white;
    background-color: none;
    text-indent: -9999px !important;
    z-index: 10; }
    .orbit-container .orbit-prev:hover, .orbit-container .orbit-next:hover {
      background-color: rgba(0, 0, 0, 0.3); }
    .orbit-container .orbit-prev > span, .orbit-container .orbit-next > span {
      position: absolute;
      top: 50%;
      margin-top: -10px;
      display: block;
      width: 0;
      height: 0;
      border: inset 10px; }
  .orbit-container .orbit-prev {
    left: 0; }
    .orbit-container .orbit-prev > span {
      border-right-style: solid;
      border-color: transparent;
      border-right-color: white; }
    .orbit-container .orbit-prev:hover > span {
      border-right-color: white; }
  .orbit-container .orbit-next {
    right: 0; }
    .orbit-container .orbit-next > span {
      border-color: transparent;
      border-left-style: solid;
      border-left-color: white;
      left: 50%;
      margin-left: -4px; }
    .orbit-container .orbit-next:hover > span {
      border-left-color: white; }

.orbit-bullets-container {
  text-align: center; }

.orbit-bullets {
  margin: 0 auto 30px auto;
  overflow: hidden;
  position: relative;
  top: 10px;
  float: none;
  text-align: center;
  display: block; }
  .orbit-bullets li {
    display: inline-block;
    width: 0.5625rem;
    height: 0.5625rem;
    background: #cccccc;
    float: none;
    margin-right: 6px;
    -webkit-border-radius: 1000px;
    border-radius: 1000px; }
    .orbit-bullets li.active {
      background: #999999; }
    .orbit-bullets li:last-child {
      margin-right: 0; }

.touch .orbit-container .orbit-prev, .touch .orbit-container .orbit-next {
  display: none; }
.touch .orbit-bullets {
  display: none; }

@media only screen and (min-width:40.063em) {
  .touch .orbit-container .orbit-prev, .touch .orbit-container .orbit-next {
    display: inherit; }
  .touch .orbit-bullets {
    display: block; } }

@media only screen and (max-width: 40em) {
  .orbit-stack-on-small .orbit-slides-container {
    height: auto !important; }
  .orbit-stack-on-small .orbit-slides-container > * {
    position: relative;
    margin-left: 0% !important; }
  .orbit-stack-on-small .orbit-timer, .orbit-stack-on-small .orbit-next, .orbit-stack-on-small .orbit-prev, .orbit-stack-on-small .orbit-bullets {
    display: none; } }

ul.pagination {
  display: block;
  height: 1.5rem;
  margin-left: -0.3125rem; }
  ul.pagination li {
    height: 1.5rem;
    color: #222222;
    font-size: 0.875rem;
    margin-left: 0.3125rem; }
    ul.pagination li a {
      display: block;
      padding: 0.0625rem 0.625rem 0.0625rem;
      color: #999999;
      -webkit-border-radius: 3px;
      border-radius: 3px; }
    ul.pagination li:hover a, ul.pagination li a:focus {
      background: #e6e6e6; }
    ul.pagination li.unavailable a {
      cursor: default;
      color: #999999; }
    ul.pagination li.unavailable:hover a, ul.pagination li.unavailable a:focus {
      background: transparent; }
    ul.pagination li.current a {
      background: #008cba;
      color: white;
      font-weight: bold;
      cursor: default; }
      ul.pagination li.current a:hover, ul.pagination li.current a:focus {
        background: #008cba; }
  ul.pagination li {
    float: left;
    display: block; }

/* Pagination centred wrapper */
.pagination-centered {
  text-align: center; }
  .pagination-centered ul.pagination li {
    float: none;
    display: inline-block; }

/* Panels */
.panel {
  border-style: solid;
  border-width: 1px;
  border-color: #d7d7d7;
  margin-bottom: 1.25rem;
  padding: 1.25rem;
  background: #f2f2f2; }
  .panel > :first-child {
    margin-top: 0; }
  .panel > :last-child {
    margin-bottom: 0; }
  .panel h1, .panel h2, .panel h3, .panel h4, .panel h5, .panel h6, .panel p {
    color: #333333; }
  .panel h1, .panel h2, .panel h3, .panel h4, .panel h5, .panel h6 {
    line-height: 1;
    margin-bottom: 0.625rem; }
    .panel h1.subheader, .panel h2.subheader, .panel h3.subheader, .panel h4.subheader, .panel h5.subheader, .panel h6.subheader {
      line-height: 1.4; }
  .panel.callout {
    border-style: solid;
    border-width: 1px;
    border-color: #b6edff;
    margin-bottom: 1.25rem;
    padding: 1.25rem;
    background: #ecfaff; }
    .panel.callout > :first-child {
      margin-top: 0; }
    .panel.callout > :last-child {
      margin-bottom: 0; }
    .panel.callout h1, .panel.callout h2, .panel.callout h3, .panel.callout h4, .panel.callout h5, .panel.callout h6, .panel.callout p {
      color: #333333; }
    .panel.callout h1, .panel.callout h2, .panel.callout h3, .panel.callout h4, .panel.callout h5, .panel.callout h6 {
      line-height: 1;
      margin-bottom: 0.625rem; }
      .panel.callout h1.subheader, .panel.callout h2.subheader, .panel.callout h3.subheader, .panel.callout h4.subheader, .panel.callout h5.subheader, .panel.callout h6.subheader {
        line-height: 1.4; }
    .panel.callout a {
      color: #008cba; }
  .panel.radius {
    -webkit-border-radius: 3px;
    border-radius: 3px; }

/* Pricing Tables */
.pricing-table {
  border: solid 1px #dddddd;
  margin-left: 0;
  margin-bottom: 1.25rem; }
  .pricing-table * {
    list-style: none;
    line-height: 1; }
  .pricing-table .title {
    background-color: #333333;
    padding: 0.9375rem 1.25rem;
    text-align: center;
    color: #eeeeee;
    font-weight: normal;
    font-size: 1rem;
    font-family: "Helvetica Neue", "Helvetica", Helvetica, Arial, sans-serif; }
  .pricing-table .price {
    background-color: #f6f6f6;
    padding: 0.9375rem 1.25rem;
    text-align: center;
    color: #333333;
    font-weight: normal;
    font-size: 2rem;
    font-family: "Helvetica Neue", "Helvetica", Helvetica, Arial, sans-serif; }
  .pricing-table .description {
    background-color: white;
    padding: 0.9375rem;
    text-align: center;
    color: #777777;
    font-size: 0.75rem;
    font-weight: normal;
    line-height: 1.4;
    border-bottom: dotted 1px #dddddd; }
  .pricing-table .bullet-item {
    background-color: white;
    padding: 0.9375rem;
    text-align: center;
    color: #333333;
    font-size: 0.875rem;
    font-weight: normal;
    border-bottom: dotted 1px #dddddd; }
  .pricing-table .cta-button {
    background-color: white;
    text-align: center;
    padding: 1.25rem 1.25rem 0; }

/* Progress Bar */
.progress {
  background-color: #f6f6f6;
  height: 1.5625rem;
  border: 1px solid white;
  padding: 0.125rem;
  margin-bottom: 0.625rem; }
  .progress .meter {
    background: #008cba;
    height: 100%;
    display: block; }
  .progress.secondary .meter {
    background: #e7e7e7;
    height: 100%;
    display: block; }
  .progress.success .meter {
    background: #43ac6a;
    height: 100%;
    display: block; }
  .progress.alert .meter {
    background: #f04124;
    height: 100%;
    display: block; }
  .progress.radius {
    -webkit-border-radius: 3px;
    border-radius: 3px; }
    .progress.radius .meter {
      -webkit-border-radius: 2px;
      border-radius: 2px; }
  .progress.round {
    -webkit-border-radius: 1000px;
    border-radius: 1000px; }
    .progress.round .meter {
      -webkit-border-radius: 999px;
      border-radius: 999px; }

.reveal-modal-bg {
  position: fixed;
  height: 100%;
  width: 100%;
  background: black;
  background: rgba(0, 0, 0, 0.45);
  z-index: 98;
  display: none;
  top: 0;
  left: 0; }

.reveal-modal {
  visibility: hidden;
  display: none;
  position: absolute;
  left: 50%;
  z-index: 99;
  height: auto;
  margin-left: -40%;
  width: 80%;
  background-color: white;
  padding: 1.25rem;
  border: solid 1px #666666;
  -webkit-box-shadow: 0 0 10px rgba(0, 0, 0, 0.4);
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.4);
  top: 6.25rem; }
  .reveal-modal .column, .reveal-modal .columns {
    min-width: 0; }
  .reveal-modal > :first-child {
    margin-top: 0; }
  .reveal-modal > :last-child {
    margin-bottom: 0; }
  .reveal-modal .close-reveal-modal {
    font-size: 1.375rem;
    line-height: 1;
    position: absolute;
    top: 0.5rem;
    right: 0.6875rem;
    color: #aaaaaa;
    font-weight: bold;
    cursor: pointer; }

@media only screen and (min-width:40.063em) {
  .reveal-modal {
    padding: 1.875rem;
    top: 6.25rem; }
    .reveal-modal.tiny {
      margin-left: -15%;
      width: 30%; }
    .reveal-modal.small {
      margin-left: -20%;
      width: 40%; }
    .reveal-modal.medium {
      margin-left: -30%;
      width: 60%; }
    .reveal-modal.large {
      margin-left: -35%;
      width: 70%; }
    .reveal-modal.xlarge {
      margin-left: -47.5%;
      width: 95%; } }

@media print {
  .reveal-modal {
    background: white !important; } }

.side-nav {
  display: block;
  margin: 0;
  padding: 0.875rem 0;
  list-style-type: none;
  list-style-position: inside;
  font-family: "Helvetica Neue", "Helvetica", Helvetica, Arial, sans-serif; }
  .side-nav li {
    margin: 0px;
    font-size: 0.875rem; }
    .side-nav li a {
      display: block;
      color: #008cba; }
    .side-nav li.active > a:first-child {
      color: #4d4d4d;
      font-weight: normal;
      font-family: "Helvetica Neue", "Helvetica", Helvetica, Arial, sans-serif; }
    .side-nav li.divider {
      border-top: 1px solid;
      height: 0;
      padding: 0;
      list-style: none;
      border-top-color: white; }

.split.button {
  position: relative;
  padding-right: 5.0625rem; }
  .split.button span {
    display: block;
    height: 100%;
    position: absolute;
    right: 0;
    top: 0;
    border-left: solid 1px; }
    .split.button span:before {
      position: absolute;
      content: "";
      width: 0;
      height: 0;
      display: block;
      border-style: inset;
      top: 50%;
      left: 50%; }
    .split.button span:active {
      background-color: rgba(0, 0, 0, 0.1); }
  .split.button span {
    border-left-color: rgba(255, 255, 255, 0.5); }
  .split.button span {
    width: 3.09375rem; }
    .split.button span:before {
      border-top-style: solid;
      border-width: 0.375rem;
      top: 48%;
      margin-left: -0.375rem; }
  .split.button span:before {
    border-color: white transparent transparent transparent; }
  .split.button.secondary span {
    border-left-color: rgba(255, 255, 255, 0.5); }
  .split.button.secondary span:before {
    border-color: white transparent transparent transparent; }
  .split.button.alert span {
    border-left-color: rgba(255, 255, 255, 0.5); }
  .split.button.success span {
    border-left-color: rgba(255, 255, 255, 0.5); }
  .split.button.tiny {
    padding-right: 3.75rem; }
    .split.button.tiny span {
      width: 2.25rem; }
      .split.button.tiny span:before {
        border-top-style: solid;
        border-width: 0.375rem;
        top: 48%;
        margin-left: -0.375rem; }
  .split.button.small {
    padding-right: 4.375rem; }
    .split.button.small span {
      width: 2.625rem; }
      .split.button.small span:before {
        border-top-style: solid;
        border-width: 0.4375rem;
        top: 48%;
        margin-left: -0.375rem; }
  .split.button.large {
    padding-right: 5.5rem; }
    .split.button.large span {
      width: 3.4375rem; }
      .split.button.large span:before {
        border-top-style: solid;
        border-width: 0.3125rem;
        top: 48%;
        margin-left: -0.375rem; }
  .split.button.expand {
    padding-left: 2rem; }
  .split.button.secondary span:before {
    border-color: #333333 transparent transparent transparent; }
  .split.button.radius span {
    -moz-border-radius-topright: 3px;
    -moz-border-radius-bottomright: 3px;
    -webkit-border-top-right-radius: 3px;
    -webkit-border-bottom-right-radius: 3px;
    border-top-right-radius: 3px;
    border-bottom-right-radius: 3px; }
  .split.button.round span {
    -moz-border-radius-topright: 1000px;
    -moz-border-radius-bottomright: 1000px;
    -webkit-border-top-right-radius: 1000px;
    -webkit-border-bottom-right-radius: 1000px;
    border-top-right-radius: 1000px;
    border-bottom-right-radius: 1000px; }

.sub-nav {
  display: block;
  width: auto;
  overflow: hidden;
  margin: -0.25rem 0 1.125rem;
  padding-top: 0.25rem;
  margin-right: 0;
  margin-left: -0.75rem; }
  .sub-nav dt {
    text-transform: uppercase; }
  .sub-nav dt, .sub-nav dd, .sub-nav li {
    float: left;
    display: inline;
    margin-left: 1rem;
    margin-bottom: 0.625rem;
    font-family: "Helvetica Neue", "Helvetica", Helvetica, Arial, sans-serif;
    font-weight: normal;
    font-size: 0.875rem;
    color: #999999; }
    .sub-nav dt a, .sub-nav dd a, .sub-nav li a {
      text-decoration: none;
      color: #999999; }
      .sub-nav dt a:hover, .sub-nav dd a:hover, .sub-nav li a:hover {
        color: #0087b1; }
    .sub-nav dt.active a, .sub-nav dd.active a, .sub-nav li.active a {
      -webkit-border-radius: 3px;
      border-radius: 3px;
      font-weight: normal;
      background: #008cba;
      padding: 0.1875rem 1rem;
      cursor: default;
      color: white; }
      .sub-nav dt.active a:hover, .sub-nav dd.active a:hover, .sub-nav li.active a:hover {
        background: #0087b1; }

div.switch {
  position: relative;
  padding: 0;
  display: block;
  overflow: hidden;
  border-style: solid;
  border-width: 1px;
  margin-bottom: 1.25rem;
  height: 2.25rem;
  background: white;
  border-color: #cccccc; }
  div.switch label {
    position: relative;
    left: 0;
    z-index: 2;
    float: left;
    width: 50%;
    height: 100%;
    margin: 0;
    font-weight: bold;
    text-align: left;
    -webkit-transition: all 0.1s ease-out;
    -moz-transition: all 0.1s ease-out;
    transition: all 0.1s ease-out; }
  div.switch input {
    position: absolute;
    z-index: 3;
    opacity: 0;
    width: 100%;
    height: 100%;
    -moz-appearance: none; }
    div.switch input:hover, div.switch input:focus {
      cursor: pointer; }
  div.switch span:last-child {
    position: absolute;
    top: -1px;
    left: -1px;
    z-index: 1;
    display: block;
    padding: 0;
    border-width: 1px;
    border-style: solid;
    -webkit-transition: all 0.1s ease-out;
    -moz-transition: all 0.1s ease-out;
    transition: all 0.1s ease-out; }
  div.switch input:not(:checked) + label {
    opacity: 0; }
  div.switch input:checked {
    display: none !important; }
  div.switch input {
    left: 0;
    display: block !important; }
  div.switch input:first-of-type + label, div.switch input:first-of-type + span + label {
    left: -50%; }
  div.switch input:first-of-type:checked + label, div.switch input:first-of-type:checked + span + label {
    left: 0%; }
  div.switch input:last-of-type + label, div.switch input:last-of-type + span + label {
    right: -50%;
    left: auto;
    text-align: right; }
  div.switch input:last-of-type:checked + label, div.switch input:last-of-type:checked + span + label {
    right: 0%;
    left: auto; }
  div.switch span.custom {
    display: none !important; }
  form.custom div.switch .hidden-field {
    margin-left: auto;
    position: absolute;
    visibility: visible; }
  div.switch label {
    padding: 0;
    line-height: 2.3rem;
    font-size: 0.875rem; }
  div.switch input:first-of-type:checked ~ span:last-child {
    left: 100%;
    margin-left: -2.1875rem; }
  div.switch span:last-child {
    width: 2.25rem;
    height: 2.25rem; }
  div.switch span:last-child {
    border-color: #b3b3b3;
    background: white;
    background: -moz-linear-gradient(top, #ffffff 0%, #f2f2f2 100%);
    background: -webkit-linear-gradient(top, #ffffff 0%, #f2f2f2 100%);
    background: linear-gradient(to bottom, #ffffff 0%, #f2f2f2 100%);
    -webkit-box-shadow: 2px 0 10px 0 rgba(0, 0, 0, 0.07), 1000px 0 0 1000px #f3faf6, -2px 0 10px 0 rgba(0, 0, 0, 0.07), -1000px 0 0 1000px whitesmoke;
    box-shadow: 2px 0 10px 0 rgba(0, 0, 0, 0.07), 1000px 0 0 980px #f3faf6, -2px 0 10px 0 rgba(0, 0, 0, 0.07), -1000px 0 0 1000px whitesmoke; }
  div.switch:hover span:last-child, div.switch:focus span:last-child {
    background: white;
    background: -moz-linear-gradient(top, #ffffff 0%, #e6e6e6 100%);
    background: -webkit-linear-gradient(top, #ffffff 0%, #e6e6e6 100%);
    background: linear-gradient(to bottom, #ffffff 0%, #e6e6e6 100%); }
  div.switch:active {
    background: transparent; }
  div.switch.large {
    height: 2.75rem; }
    div.switch.large label {
      padding: 0;
      line-height: 2.3rem;
      font-size: 1.0625rem; }
    div.switch.large input:first-of-type:checked ~ span:last-child {
      left: 100%;
      margin-left: -2.6875rem; }
    div.switch.large span:last-child {
      width: 2.75rem;
      height: 2.75rem; }
  div.switch.small {
    height: 1.75rem; }
    div.switch.small label {
      padding: 0;
      line-height: 2.1rem;
      font-size: 0.75rem; }
    div.switch.small input:first-of-type:checked ~ span:last-child {
      left: 100%;
      margin-left: -1.6875rem; }
    div.switch.small span:last-child {
      width: 1.75rem;
      height: 1.75rem; }
  div.switch.tiny {
    height: 1.375rem; }
    div.switch.tiny label {
      padding: 0;
      line-height: 1.9rem;
      font-size: 0.6875rem; }
    div.switch.tiny input:first-of-type:checked ~ span:last-child {
      left: 100%;
      margin-left: -1.3125rem; }
    div.switch.tiny span:last-child {
      width: 1.375rem;
      height: 1.375rem; }
  div.switch.radius {
    -webkit-border-radius: 4px;
    border-radius: 4px; }
    div.switch.radius span:last-child {
      -webkit-border-radius: 3px;
      border-radius: 3px; }
  div.switch.round {
    -webkit-border-radius: 1000px;
    border-radius: 1000px; }
    div.switch.round span:last-child {
      -webkit-border-radius: 999px;
      border-radius: 999px; }
    div.switch.round label {
      padding: 0 0.5625rem; }

@-webkit-keyframes webkitSiblingBugfix {
  from {
    position: relative; }

  to {
    position: relative; } }

table {
  background: white;
  margin-bottom: 1.25rem;
  border: solid 1px #dddddd; }
  table thead, table tfoot {
    background: whitesmoke; }
    table thead tr th, table thead tr td, table tfoot tr th, table tfoot tr td {
      padding: 0.5rem 0.625rem 0.625rem;
      font-size: 0.875rem;
      font-weight: bold;
      color: #222222;
      text-align: left; }
  table tr th, table tr td {
    padding: 0.5625rem 0.625rem;
    font-size: 0.875rem;
    color: #222222; }
  table tr.even, table tr.alt, table tr:nth-of-type(even) {
    background: #f9f9f9; }
  table thead tr th, table tfoot tr th, table tbody tr td, table tr td, table tfoot tr td {
    display: table-cell;
    line-height: 1.125rem; }

.tabs {
  *zoom: 1;
  margin-bottom: 0 !important; }
  .tabs:before, .tabs:after {
    content: " ";
    display: table; }
  .tabs:after {
    clear: both; }
  .tabs dd {
    position: relative;
    margin-bottom: 0 !important;
    top: 1px;
    float: left; }
    .tabs dd > a {
      display: block;
      background: #efefef;
      color: #222222;
      padding-top: 1rem;
      padding-right: 2rem;
      padding-bottom: 1.0625rem;
      padding-left: 2rem;
      font-family: "Helvetica Neue", "Helvetica", Helvetica, Arial, sans-serif;
      font-size: 1rem; }
      .tabs dd > a:hover {
        background: #e1e1e1; }
    .tabs dd.active a {
      background: white; }
  .tabs.radius dd:first-child a {
    -moz-border-radius-bottomleft: 3px;
    -moz-border-radius-topleft: 3px;
    -webkit-border-bottom-left-radius: 3px;
    -webkit-border-top-left-radius: 3px;
    border-bottom-left-radius: 3px;
    border-top-left-radius: 3px; }
  .tabs.radius dd:last-child a {
    -moz-border-radius-topright: 3px;
    -moz-border-radius-bottomright: 3px;
    -webkit-border-top-right-radius: 3px;
    -webkit-border-bottom-right-radius: 3px;
    border-top-right-radius: 3px;
    border-bottom-right-radius: 3px; }
  .tabs.vertical dd {
    position: inherit;
    float: none;
    display: block;
    top: auto; }

.tabs-content {
  *zoom: 1;
  margin-bottom: 1.5rem; }
  .tabs-content:before, .tabs-content:after {
    content: " ";
    display: table; }
  .tabs-content:after {
    clear: both; }
  .tabs-content > .content {
    display: none;
    float: left;
    padding: 0.9375rem 0; }
    .tabs-content > .content.active {
      display: block; }
    .tabs-content > .content.contained {
      padding: 0.9375rem; }
  .tabs-content.vertical {
    display: block; }
    .tabs-content.vertical > .content {
      padding: 0 0.9375rem; }

@media only screen and (min-width:40.063em) {
  .tabs.vertical {
    width: 20%;
    float: left;
    margin-bottom: 1.25rem; }
  .tabs-content.vertical {
    width: 80%;
    float: left;
    margin-left: -1px; } }

/* Image Thumbnails */
.th {
  line-height: 0;
  display: inline-block;
  border: solid 4px white;
  max-width: 100%;
  -webkit-box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.2);
  box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.2);
  -webkit-transition: all 200ms ease-out;
  -moz-transition: all 200ms ease-out;
  transition: all 200ms ease-out; }
  .th:hover, .th:focus {
    -webkit-box-shadow: 0 0 6px 1px rgba(0, 140, 186, 0.5);
    box-shadow: 0 0 6px 1px rgba(0, 140, 186, 0.5); }
  .th.radius {
    -webkit-border-radius: 3px;
    border-radius: 3px; }

/* Tooltips */
.has-tip {
  border-bottom: dotted 1px #cccccc;
  cursor: help;
  font-weight: bold;
  color: #333333; }
  .has-tip:hover, .has-tip:focus {
    border-bottom: dotted 1px #004054;
    color: #008cba; }
  .has-tip.tip-left, .has-tip.tip-right {
    float: none !important; }

.tooltip {
  display: none;
  position: absolute;
  z-index: 999;
  font-weight: normal;
  font-size: 0.875rem;
  line-height: 1.3;
  padding: 0.75rem;
  max-width: 85%;
  left: 50%;
  width: 100%;
  color: white;
  background: #333333;
  -webkit-border-radius: 3px;
  border-radius: 3px; }
  .tooltip > .nub {
    display: block;
    left: 5px;
    position: absolute;
    width: 0;
    height: 0;
    border: solid 5px;
    border-color: transparent transparent #333333 transparent;
    top: -10px; }
  .tooltip.opened {
    color: #008cba !important;
    border-bottom: dotted 1px #004054 !important; }

.tap-to-close {
  display: block;
  font-size: 0.625rem;
  color: #777777;
  font-weight: normal; }

@media only screen and (min-width:40.063em) {
  .tooltip > .nub {
    border-color: transparent transparent #333333 transparent;
    top: -10px; }
  .tooltip.tip-top > .nub {
    border-color: #333333 transparent transparent transparent;
    top: auto;
    bottom: -10px; }
  .tooltip.tip-left, .tooltip.tip-right {
    float: none !important; }
  .tooltip.tip-left > .nub {
    border-color: transparent transparent transparent #333333;
    right: -10px;
    left: auto;
    top: 50%;
    margin-top: -5px; }
  .tooltip.tip-right > .nub {
    border-color: transparent #333333 transparent transparent;
    right: auto;
    left: -10px;
    top: 50%;
    margin-top: -5px; } }

meta.foundation-mq-topbar {
  font-family: "/only screen and (min-width:40.063em)/";
  width: 40.063em; }

/* Wrapped around .top-bar to contain to grid width */
.contain-to-grid {
  width: 100%;
  background: #333333; }
  .contain-to-grid .top-bar {
    margin-bottom: 0; }

.fixed {
  width: 100%;
  left: 0;
  position: fixed;
  top: 0;
  z-index: 99; }
  .fixed.expanded:not(.top-bar) {
    overflow-y: auto;
    height: auto;
    width: 100%;
    max-height: 100%; }
    .fixed.expanded:not(.top-bar) .title-area {
      position: fixed;
      width: 100%;
      z-index: 99; }
    .fixed.expanded:not(.top-bar) .top-bar-section {
      z-index: 98;
      margin-top: 45px; }

.top-bar {
  overflow: hidden;
  height: 45px;
  line-height: 45px;
  position: relative;
  background: #333333;
  margin-bottom: 0; }
  .top-bar ul {
    margin-bottom: 0;
    list-style: none; }
  .top-bar .row {
    max-width: none; }
  .top-bar form, .top-bar input {
    margin-bottom: 0; }
  .top-bar input {
    height: auto;
    padding-top: 0.35rem;
    padding-bottom: 0.35rem;
    font-size: 0.75rem; }
  .top-bar .button {
    padding-top: 0.45rem;
    padding-bottom: 0.35rem;
    margin-bottom: 0;
    font-size: 0.75rem; }
  .top-bar .title-area {
    position: relative;
    margin: 0; }
  .top-bar .name {
    height: 45px;
    margin: 0;
    font-size: 16px; }
    .top-bar .name h1 {
      line-height: 45px;
      font-size: 1.0625rem;
      margin: 0; }
      .top-bar .name h1 a {
        font-weight: normal;
        color: white;
        width: 50%;
        display: block;
        padding: 0 15px; }
  .top-bar .toggle-topbar {
    position: absolute;
    right: 0;
    top: 0; }
    .top-bar .toggle-topbar a {
      color: white;
      text-transform: uppercase;
      font-size: 0.8125rem;
      font-weight: bold;
      position: relative;
      display: block;
      padding: 0 15px;
      height: 45px;
      line-height: 45px; }
    .top-bar .toggle-topbar.menu-icon {
      right: 15px;
      top: 50%;
      margin-top: -16px;
      padding-left: 40px; }
      .top-bar .toggle-topbar.menu-icon a {
        height: 34px;
        line-height: 33px;
        padding: 0;
        padding-right: 25px;
        color: white;
        position: relative; }
        .top-bar .toggle-topbar.menu-icon a::after {
          content: "";
          position: absolute;
          right: 0;
          display: block;
          width: 16px;
          top: 0;
          height: 0;
          -webkit-box-shadow: 0 10px 0 1px white, 0 16px 0 1px white, 0 22px 0 1px white;
          box-shadow: 0 10px 0 1px white, 0 16px 0 1px white, 0 22px 0 1px white; }
  .top-bar.expanded {
    height: auto;
    background: transparent; }
    .top-bar.expanded .title-area {
      background: #333333; }
    .top-bar.expanded .toggle-topbar a {
      color: #888888; }
      .top-bar.expanded .toggle-topbar a span {
        -webkit-box-shadow: 0 10px 0 1px #888888, 0 16px 0 1px #888888, 0 22px 0 1px #888888;
        box-shadow: 0 10px 0 1px #888888, 0 16px 0 1px #888888, 0 22px 0 1px #888888; }

.top-bar-section {
  left: 0;
  position: relative;
  width: auto;
  -webkit-transition: left 300ms ease-out;
  -moz-transition: left 300ms ease-out;
  transition: left 300ms ease-out; }
  .top-bar-section ul {
    width: 100%;
    height: auto;
    display: block;
    background: #333333;
    font-size: 16px;
    margin: 0; }
  .top-bar-section .divider, .top-bar-section [role="separator"] {
    border-top: solid 1px #1a1a1a;
    clear: both;
    height: 1px;
    width: 100%; }
  .top-bar-section ul li > a {
    display: block;
    width: 100%;
    color: white;
    padding: 12px 0 12px 0;
    padding-left: 15px;
    font-family: "Helvetica Neue", "Helvetica", Helvetica, Arial, sans-serif;
    font-size: 0.8125rem;
    font-weight: normal;
    background: #333333; }
    .top-bar-section ul li > a.button {
      background: #008cba;
      font-size: 0.8125rem;
      padding-right: 15px;
      padding-left: 15px; }
      .top-bar-section ul li > a.button:hover {
        background: #006888; }
    .top-bar-section ul li > a.button.secondary {
      background: #e7e7e7; }
      .top-bar-section ul li > a.button.secondary:hover {
        background: #cecece; }
    .top-bar-section ul li > a.button.success {
      background: #43ac6a; }
      .top-bar-section ul li > a.button.success:hover {
        background: #358853; }
    .top-bar-section ul li > a.button.alert {
      background: #f04124; }
      .top-bar-section ul li > a.button.alert:hover {
        background: #d4290f; }
  .top-bar-section ul li:hover > a {
    background: #272727;
    color: white; }
  .top-bar-section ul li.active > a {
    background: #008cba;
    color: white; }
    .top-bar-section ul li.active > a:hover {
      background: #007ba0; }
  .top-bar-section .has-form {
    padding: 15px; }
  .top-bar-section .has-dropdown {
    position: relative; }
    .top-bar-section .has-dropdown > a:after {
      content: "";
      display: block;
      width: 0;
      height: 0;
      border: inset 5px;
      border-color: transparent transparent transparent rgba(255, 255, 255, 0.4);
      border-left-style: solid;
      margin-right: 15px;
      margin-top: -4.5px;
      position: absolute;
      top: 50%;
      right: 0; }
    .top-bar-section .has-dropdown.moved {
      position: static; }
      .top-bar-section .has-dropdown.moved > .dropdown {
        display: block; }
  .top-bar-section .dropdown {
    position: absolute;
    left: 100%;
    top: 0;
    display: none;
    z-index: 99; }
    .top-bar-section .dropdown li {
      width: 100%;
      height: auto; }
      .top-bar-section .dropdown li a {
        font-weight: normal;
        padding: 8px 15px; }
        .top-bar-section .dropdown li a.parent-link {
          font-weight: normal; }
      .top-bar-section .dropdown li.title h5 {
        margin-bottom: 0; }
        .top-bar-section .dropdown li.title h5 a {
          color: white;
          line-height: 22.5px;
          display: block; }
      .top-bar-section .dropdown li.has-form {
        padding: 8px 15px; }
      .top-bar-section .dropdown li .button {
        top: auto; }
    .top-bar-section .dropdown label {
      padding: 8px 15px 2px;
      margin-bottom: 0;
      text-transform: uppercase;
      color: #777777;
      font-weight: bold;
      font-size: 0.625rem; }

.js-generated {
  display: block; }

@media only screen and (min-width:40.063em) {
  .top-bar {
    background: #333333;
    *zoom: 1;
    overflow: visible; }
    .top-bar:before, .top-bar:after {
      content: " ";
      display: table; }
    .top-bar:after {
      clear: both; }
    .top-bar .toggle-topbar {
      display: none; }
    .top-bar .title-area {
      float: left; }
    .top-bar .name h1 a {
      width: auto; }
    .top-bar input, .top-bar .button {
      font-size: 0.875rem;
      position: relative;
      top: 7px; }
    .top-bar.expanded {
      background: #333333; }
  .contain-to-grid .top-bar {
    max-width: 62.5rem;
    margin: 0 auto;
    margin-bottom: 0; }
  .top-bar-section {
    -webkit-transition: none 0 0;
    -moz-transition: none 0 0;
    transition: none 0 0;
    left: 0 !important; }
    .top-bar-section ul {
      width: auto;
      height: auto !important;
      display: inline; }
      .top-bar-section ul li {
        float: left; }
        .top-bar-section ul li .js-generated {
          display: none; }
    .top-bar-section li.hover > a:not(.button) {
      background: #272727;
      color: white; }
    .top-bar-section li:not(.has-form) a:not(.button) {
      padding: 0 15px;
      line-height: 45px;
      background: #333333; }
      .top-bar-section li:not(.has-form) a:not(.button):hover {
        background: #272727; }
    .top-bar-section .has-dropdown > a {
      padding-right: 35px !important; }
      .top-bar-section .has-dropdown > a:after {
        content: "";
        display: block;
        width: 0;
        height: 0;
        border: inset 5px;
        border-color: rgba(255, 255, 255, 0.4) transparent transparent transparent;
        border-top-style: solid;
        margin-top: -2.5px;
        top: 22.5px; }
    .top-bar-section .has-dropdown.moved {
      position: relative; }
      .top-bar-section .has-dropdown.moved > .dropdown {
        display: none; }
    .top-bar-section .has-dropdown.hover > .dropdown, .top-bar-section .has-dropdown.not-click:hover > .dropdown {
      display: block; }
    .top-bar-section .has-dropdown .dropdown li.has-dropdown > a:after {
      border: none;
      content: "\00bb";
      top: 1rem;
      margin-top: -2px;
      right: 5px;
      line-height: 1.2; }
    .top-bar-section .dropdown {
      left: 0;
      top: auto;
      background: transparent;
      min-width: 100%; }
      .top-bar-section .dropdown li a {
        color: white;
        line-height: 1;
        white-space: nowrap;
        padding: 12px 15px;
        background: #333333; }
      .top-bar-section .dropdown li label {
        white-space: nowrap;
        background: #333333; }
      .top-bar-section .dropdown li .dropdown {
        left: 100%;
        top: 0; }
    .top-bar-section > ul > .divider, .top-bar-section > ul > [role="separator"] {
      border-bottom: none;
      border-top: none;
      border-right: solid 1px #4e4e4e;
      clear: none;
      height: 45px;
      width: 0; }
    .top-bar-section .has-form {
      background: #333333;
      padding: 0 15px;
      height: 45px; }
    .top-bar-section .right li .dropdown {
      left: auto;
      right: 0; }
      .top-bar-section .right li .dropdown li .dropdown {
        right: 100%; }
    .top-bar-section .left li .dropdown {
      right: auto;
      left: 0; }
      .top-bar-section .left li .dropdown li .dropdown {
        left: 100%; }
  .no-js .top-bar-section ul li:hover > a {
    background: #272727;
    color: white; }
  .no-js .top-bar-section ul li:active > a {
    background: #008cba;
    color: white; }
  .no-js .top-bar-section .has-dropdown:hover > .dropdown {
    display: block; } }

/* Typography resets */
div, dl, dt, dd, ul, ol, li, h1, h2, h3, h4, h5, h6, pre, form, p, blockquote, th, td {
  margin: 0;
  padding: 0; }

/* Default Link Styles */
a {
  color: #008cba;
  text-decoration: none;
  line-height: inherit; }
  a:hover, a:focus {
    color: #007ba0; }
  a img {
    border: none; }

/* Default paragraph styles */
p {
  font-family: inherit;
  font-weight: normal;
  font-size: 1rem;
  line-height: 1.6;
  margin-bottom: 1.25rem;
  text-rendering: optimizeLegibility; }
  p.lead {
    font-size: 1.21875rem;
    line-height: 1.6; }
  p aside {
    font-size: 0.875rem;
    line-height: 1.35;
    font-style: italic; }

/* Default header styles */
h1, h2, h3, h4, h5, h6 {
  font-family: "Helvetica Neue", "Helvetica", Helvetica, Arial, sans-serif;
  font-weight: 300;
  font-style: normal;
  color: #222222;
  text-rendering: optimizeLegibility;
  margin-top: 0.2rem;
  margin-bottom: 0.5rem;
  line-height: 1.4; }
  h1 small, h2 small, h3 small, h4 small, h5 small, h6 small {
    font-size: 60%;
    color: #6f6f6f;
    line-height: 0; }

h1 {
  font-size: 2.125rem; }

h2 {
  font-size: 1.6875rem; }

h3 {
  font-size: 1.375rem; }

h4 {
  font-size: 1.125rem; }

h5 {
  font-size: 1.125rem; }

h6 {
  font-size: 1rem; }

.subheader {
  line-height: 1.4;
  color: #6f6f6f;
  font-weight: 300;
  margin-top: 0.2rem;
  margin-bottom: 0.5rem; }

hr {
  border: solid #dddddd;
  border-width: 1px 0 0;
  clear: both;
  margin: 1.25rem 0 1.1875rem;
  height: 0; }

/* Helpful Typography Defaults */
em, i {
  font-style: italic;
  line-height: inherit; }

strong, b {
  font-weight: bold;
  line-height: inherit; }

small {
  font-size: 60%;
  line-height: inherit; }

code {
  font-family: Consolas, 'Liberation Mono', Courier, monospace;
  font-weight: bold;
  color: #bd240d; }

/* Lists */
ul, ol, dl {
  font-size: 1rem;
  line-height: 1.6;
  margin-bottom: 1.25rem;
  list-style-position: outside;
  font-family: inherit; }

ul {
  margin-left: 1.1rem; }
  ul.no-bullet {
    margin-left: 0; }
    ul.no-bullet li ul, ul.no-bullet li ol {
      margin-left: 1.25rem;
      margin-bottom: 0;
      list-style: none; }

/* Unordered Lists */
ul li ul, ul li ol {
  margin-left: 1.25rem;
  margin-bottom: 0;
  font-size: 1rem;
  /* Override nested font-size change */ }
ul.square li ul, ul.circle li ul, ul.disc li ul {
  list-style: inherit; }
ul.square {
  list-style-type: square;
  margin-left: 1.1rem; }
ul.circle {
  list-style-type: circle;
  margin-left: 1.1rem; }
ul.disc {
  list-style-type: disc;
  margin-left: 1.1rem; }
ul.no-bullet {
  list-style: none; }

/* Ordered Lists */
ol {
  margin-left: 1.4rem; }
  ol li ul, ol li ol {
    margin-left: 1.25rem;
    margin-bottom: 0; }

/* Definition Lists */
dl dt {
  margin-bottom: 0.3rem;
  font-weight: bold; }
dl dd {
  margin-bottom: 0.75rem; }

/* Abbreviations */
abbr, acronym {
  text-transform: uppercase;
  font-size: 90%;
  color: #222222;
  border-bottom: 1px dotted #dddddd;
  cursor: help; }

abbr {
  text-transform: none; }

/* Blockquotes */
blockquote {
  margin: 0 0 1.25rem;
  padding: 0.5625rem 1.25rem 0 1.1875rem;
  border-left: 1px solid #dddddd; }
  blockquote cite {
    display: block;
    font-size: 0.8125rem;
    color: #555555; }
    blockquote cite:before {
      content: "\2014 \0020"; }
    blockquote cite a, blockquote cite a:visited {
      color: #555555; }

blockquote, blockquote p {
  line-height: 1.6;
  color: #6f6f6f; }

/* Microformats */
.vcard {
  display: inline-block;
  margin: 0 0 1.25rem 0;
  border: 1px solid #dddddd;
  padding: 0.625rem 0.75rem; }
  .vcard li {
    margin: 0;
    display: block; }
  .vcard .fn {
    font-weight: bold;
    font-size: 0.9375rem; }

.vevent .summary {
  font-weight: bold; }
.vevent abbr {
  cursor: default;
  text-decoration: none;
  font-weight: bold;
  border: none;
  padding: 0 0.0625rem; }

@media only screen and (min-width:40.063em) {
  h1, h2, h3, h4, h5, h6 {
    line-height: 1.4; }
  h1 {
    font-size: 2.75rem; }
  h2 {
    font-size: 2.3125rem; }
  h3 {
    font-size: 1.6875rem; }
  h4 {
    font-size: 1.4375rem; } }

/*
       * Print styles.
       *
       * Inlined to avoid required HTTP connection: www.phpied.com/delay-loading-your-print-css/
       * Credit to Paul Irish and HTML5 Boilerplate (html5boilerplate.com)
      */
.print-only {
  display: none !important; }

@media print {
  @page {
    margin: 0.5cm; }

  * {
    background: transparent !important;
    color: black !important;
    /* Black prints faster: h5bp.com/s */
    box-shadow: none !important;
    text-shadow: none !important; }
  a, a:visited {
    text-decoration: underline; }
  a[href]:after {
    content: " (" attr(href) ")"; }
  abbr[title]:after {
    content: " (" attr(title) ")"; }
  .ir a:after, a[href^="javascript:"]:after, a[href^="#"]:after {
    content: ""; }
  pre, blockquote {
    border: 1px solid #999999;
    page-break-inside: avoid; }
  thead {
    display: table-header-group;
    /* h5bp.com/t */ }
  tr, img {
    page-break-inside: avoid; }
  img {
    max-width: 100% !important; }
  p, h2, h3 {
    orphans: 3;
    widows: 3; }
  h2, h3 {
    page-break-after: avoid; }
  .hide-on-print {
    display: none !important; }
  .print-only {
    display: block !important; }
  .hide-for-print {
    display: none !important; }
  .show-for-print {
    display: inherit !important; } }

.off-canvas-wrap {
  -webkit-backface-visibility: hidden;
  position: relative;
  width: 100%;
  overflow: hidden; }

.inner-wrap {
  -webkit-backface-visibility: hidden;
  position: relative;
  width: 100%;
  *zoom: 1;
  -webkit-transition: -webkit-transform 500ms ease;
  -moz-transition: -moz-transform 500ms ease;
  -ms-transition: -ms-transform 500ms ease;
  -o-transition: -o-transform 500ms ease;
  transition: transform 500ms ease; }
  .inner-wrap:before, .inner-wrap:after {
    content: " ";
    display: table; }
  .inner-wrap:after {
    clear: both; }

nav.tab-bar {
  -webkit-backface-visibility: hidden;
  background: #333333;
  color: white;
  height: 2.8125rem;
  line-height: 2.8125rem;
  position: relative; }
  nav.tab-bar h1, nav.tab-bar h2, nav.tab-bar h3, nav.tab-bar h4, nav.tab-bar h5, nav.tab-bar h6 {
    color: white;
    font-weight: bold;
    line-height: 2.8125rem;
    margin: 0; }
  nav.tab-bar h1, nav.tab-bar h2, nav.tab-bar h3, nav.tab-bar h4 {
    font-size: 1.125rem; }

section.left-small {
  width: 2.8125rem;
  height: 2.8125rem;
  position: absolute;
  top: 0;
  border-right: solid 1px #1a1a1a;
  box-shadow: 1px 0 0 #4e4e4e;
  left: 0; }

section.right-small {
  width: 2.8125rem;
  height: 2.8125rem;
  position: absolute;
  top: 0;
  border-left: solid 1px #4e4e4e;
  box-shadow: -1px 0 0 #1a1a1a;
  right: 0; }

section.tab-bar-section {
  padding: 0 0.625rem;
  position: absolute;
  text-align: center;
  height: 2.8125rem;
  top: 0; }
  @media only screen and (min-width:40.063em) {
    section.tab-bar-section {
      text-align: left; } }
  section.tab-bar-section.left {
    left: 0;
    right: 2.8125rem; }
  section.tab-bar-section.right {
    left: 2.8125rem;
    right: 0; }
  section.tab-bar-section.middle {
    left: 2.8125rem;
    right: 2.8125rem; }

a.menu-icon {
  text-indent: 2.1875rem;
  width: 2.8125rem;
  height: 2.8125rem;
  display: block;
  line-height: 2.0625rem;
  padding: 0;
  color: white;
  position: relative; }
  a.menu-icon span {
    position: absolute;
    display: block;
    width: 1rem;
    height: 0;
    left: 0.8125rem;
    top: 0.3125rem;
    -webkit-box-shadow: 1px 10px 1px 1px white, 1px 16px 1px 1px white, 1px 22px 1px 1px white;
    box-shadow: 0 10px 0 1px white, 0 16px 0 1px white, 0 22px 0 1px white; }
  a.menu-icon:hover span {
    -webkit-box-shadow: 1px 10px 1px 1px #b3b3b3, 1px 16px 1px 1px #b3b3b3, 1px 22px 1px 1px #b3b3b3;
    box-shadow: 0 10px 0 1px #b3b3b3, 0 16px 0 1px #b3b3b3, 0 22px 0 1px #b3b3b3; }

.left-off-canvas-menu {
  -webkit-backface-visibility: hidden;
  width: 250px;
  top: 0;
  bottom: 0;
  height: 100%;
  position: absolute;
  overflow-y: auto;
  background: #333333;
  z-index: 1001;
  box-sizing: content-box;
  -webkit-transform: translate3d(-100%, 0, 0);
  -moz-transform: translate3d(-100%, 0, 0);
  -ms-transform: translate3d(-100%, 0, 0);
  -o-transform: translate3d(-100%, 0, 0);
  transform: translate3d(-100%, 0, 0); }
  .left-off-canvas-menu * {
    -webkit-backface-visibility: hidden; }

.right-off-canvas-menu {
  -webkit-backface-visibility: hidden;
  width: 250px;
  top: 0;
  bottom: 0;
  height: 100%;
  position: absolute;
  overflow-y: auto;
  background: #333333;
  z-index: 1001;
  box-sizing: content-box;
  -webkit-transform: translate3d(100%, 0, 0);
  -moz-transform: translate3d(100%, 0, 0);
  -ms-transform: translate3d(100%, 0, 0);
  -o-transform: translate3d(100%, 0, 0);
  transform: translate3d(100%, 0, 0);
  right: 0; }

ul.off-canvas-list {
  list-style-type: none;
  padding: 0;
  margin: 0; }
  ul.off-canvas-list li label {
    padding: 0.3rem 0.9375rem;
    color: #999999;
    text-transform: uppercase;
    font-weight: bold;
    background: #444444;
    border-top: 1px solid #5e5e5e;
    border-bottom: none;
    margin: 0; }
  ul.off-canvas-list li a {
    display: block;
    padding: 0.66667rem;
    color: rgba(255, 255, 255, 0.7);
    border-bottom: 1px solid #262626; }

.move-right > .inner-wrap {
  -webkit-transform: translate3d(250px, 0, 0);
  -moz-transform: translate3d(250px, 0, 0);
  -ms-transform: translate3d(250px, 0, 0);
  -o-transform: translate3d(250px, 0, 0);
  transform: translate3d(250px, 0, 0); }
.move-right a.exit-off-canvas {
  -webkit-backface-visibility: hidden;
  transition: background 300ms ease;
  cursor: pointer;
  box-shadow: -4px 0 4px rgba(0, 0, 0, 0.5), 4px 0 4px rgba(0, 0, 0, 0.5);
  display: block;
  position: absolute;
  background: rgba(255, 255, 255, 0.2);
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  z-index: 1002;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0); }
  @media only screen and (min-width:40.063em) {
    .move-right a.exit-off-canvas:hover {
      background: rgba(255, 255, 255, 0.05); } }

.move-left > .inner-wrap {
  -webkit-transform: translate3d(-250px, 0, 0);
  -moz-transform: translate3d(-250px, 0, 0);
  -ms-transform: translate3d(-250px, 0, 0);
  -o-transform: translate3d(-250px, 0, 0);
  transform: translate3d(-250px, 0, 0); }
.move-left a.exit-off-canvas {
  -webkit-backface-visibility: hidden;
  transition: background 300ms ease;
  cursor: pointer;
  box-shadow: -4px 0 4px rgba(0, 0, 0, 0.5), 4px 0 4px rgba(0, 0, 0, 0.5);
  display: block;
  position: absolute;
  background: rgba(255, 255, 255, 0.2);
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  z-index: 1002;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0); }
  @media only screen and (min-width:40.063em) {
    .move-left a.exit-off-canvas:hover {
      background: rgba(255, 255, 255, 0.05); } }

.csstransforms.no-csstransforms3d .left-off-canvas-menu {
  -webkit-transform: translate(-100%, 0);
  -moz-transform: translate(-100%, 0);
  -ms-transform: translate(-100%, 0);
  -o-transform: translate(-100%, 0);
  transform: translate(-100%, 0); }
.csstransforms.no-csstransforms3d .right-off-canvas-menu {
  -webkit-transform: translate(100%, 0);
  -moz-transform: translate(100%, 0);
  -ms-transform: translate(100%, 0);
  -o-transform: translate(100%, 0);
  transform: translate(100%, 0); }
.csstransforms.no-csstransforms3d .move-left > .inner-wrap {
  -webkit-transform: translate(-250px, 0);
  -moz-transform: translate(-250px, 0);
  -ms-transform: translate(-250px, 0);
  -o-transform: translate(-250px, 0);
  transform: translate(-250px, 0); }
.csstransforms.no-csstransforms3d .move-right > .inner-wrap {
  -webkit-transform: translate(250px, 0);
  -moz-transform: translate(250px, 0);
  -ms-transform: translate(250px, 0);
  -o-transform: translate(250px, 0);
  transform: translate(250px, 0); }

.no-csstransforms .left-off-canvas-menu {
  left: -250px; }
.no-csstransforms .right-off-canvas-menu {
  right: -250px; }
.no-csstransforms .move-left > .inner-wrap {
  right: 250px; }
.no-csstransforms .move-right > .inner-wrap {
  left: 250px; }

/* Foundation Visibility HTML Classes */
.show-for-small, .show-for-small-only, .show-for-medium-down, .show-for-large-down, .hide-for-medium, .hide-for-medium-up, .hide-for-medium-only, .hide-for-large, .hide-for-large-up, .hide-for-large-only, .hide-for-xlarge, .hide-for-xlarge-up, .hide-for-xlarge-only, .hide-for-xxlarge-up, .hide-for-xxlarge-only {
  display: inherit !important; }

.hide-for-small, .hide-for-small-only, .hide-for-medium-down, .show-for-medium, .show-for-medium-up, .show-for-medium-only, .hide-for-large-down, .show-for-large, .show-for-large-up, .show-for-large-only, .show-for-xlarge, .show-for-xlarge-up, .show-for-xlarge-only, .show-for-xxlarge-up, .show-for-xxlarge-only {
  display: none !important; }

/* Specific visibility for tables */
table.show-for-small, table.show-for-small-only, table.show-for-medium-down, table.show-for-large-down, table.hide-for-medium, table.hide-for-medium-up, table.hide-for-medium-only, table.hide-for-large, table.hide-for-large-up, table.hide-for-large-only, table.hide-for-xlarge, table.hide-for-xlarge-up, table.hide-for-xlarge-only, table.hide-for-xxlarge-up, table.hide-for-xxlarge-only {
  display: table; }

thead.show-for-small, thead.show-for-small-only, thead.show-for-medium-down, thead.show-for-large-down, thead.hide-for-medium, thead.hide-for-medium-up, thead.hide-for-medium-only, thead.hide-for-large, thead.hide-for-large-up, thead.hide-for-large-only, thead.hide-for-xlarge, thead.hide-for-xlarge-up, thead.hide-for-xlarge-only, thead.hide-for-xxlarge-up, thead.hide-for-xxlarge-only {
  display: table-header-group !important; }

tbody.show-for-small, tbody.show-for-small-only, tbody.show-for-medium-down, tbody.show-for-large-down, tbody.hide-for-medium, tbody.hide-for-medium-up, tbody.hide-for-medium-only, tbody.hide-for-large, tbody.hide-for-large-up, tbody.hide-for-large-only, tbody.hide-for-xlarge, tbody.hide-for-xlarge-up, tbody.hide-for-xlarge-only, tbody.hide-for-xxlarge-up, tbody.hide-for-xxlarge-only {
  display: table-row-group !important; }

tr.show-for-small, tr.show-for-small-only, tr.show-for-medium-down, tr.show-for-large-down, tr.hide-for-medium, tr.hide-for-medium-up, tr.hide-for-medium-only, tr.hide-for-large, tr.hide-for-large-up, tr.hide-for-large-only, tr.hide-for-xlarge, tr.hide-for-xlarge-up, tr.hide-for-xlarge-only, tr.hide-for-xxlarge-up, tr.hide-for-xxlarge-only {
  display: table-row !important; }

td.show-for-small, td.show-for-small-only, td.show-for-medium-down td.show-for-large-down, td.hide-for-medium, td.hide-for-medium-up, td.hide-for-large, td.hide-for-large-up, td.hide-for-xlarge td.hide-for-xlarge-up, td.hide-for-xxlarge-up, th.show-for-small, th.show-for-small-only, th.show-for-medium-down th.show-for-large-down, th.hide-for-medium, th.hide-for-medium-up, th.hide-for-large, th.hide-for-large-up, th.hide-for-xlarge th.hide-for-xlarge-up, th.hide-for-xxlarge-up {
  display: table-cell !important; }

/* Medium Displays: 641px and up */
@media only screen and (min-width:40.063em) {
  /* Specific visibility for tables */
  .hide-for-small, .hide-for-small-only, .show-for-medium, .show-for-medium-down, .show-for-medium-up, .show-for-medium-only, .hide-for-large, .hide-for-large-up, .hide-for-large-only, .hide-for-xlarge, .hide-for-xlarge-up, .hide-for-xlarge-only, .hide-for-xxlarge-up, .hide-for-xxlarge-only {
    display: inherit !important; }
  .show-for-small, .show-for-small-only, .hide-for-medium, .hide-for-medium-down, .hide-for-medium-up, .hide-for-medium-only, .hide-for-large-down, .show-for-large, .show-for-large-up, .show-for-large-only, .show-for-xlarge, .show-for-xlarge-up, .show-for-xlarge-only, .show-for-xxlarge-up, .show-for-xxlarge-only {
    display: none !important; }
  table.hide-for-small, table.hide-for-small-only, table.show-for-medium, table.show-for-medium-down, table.show-for-medium-up, table.show-for-medium-only, table.hide-for-large, table.hide-for-large-up, table.hide-for-large-only, table.hide-for-xlarge, table.hide-for-xlarge-up, table.hide-for-xlarge-only, table.hide-for-xxlarge-up, table.hide-for-xxlarge-only {
    display: table; }
  thead.hide-for-small, thead.hide-for-small-only, thead.show-for-medium, thead.show-for-medium-down, thead.show-for-medium-up, thead.show-for-medium-only, thead.hide-for-large, thead.hide-for-large-up, thead.hide-for-large-only, thead.hide-for-xlarge, thead.hide-for-xlarge-up, thead.hide-for-xlarge-only, thead.hide-for-xxlarge-up, thead.hide-for-xxlarge-only {
    display: table-header-group !important; }
  tbody.hide-for-small, tbody.hide-for-small-only, tbody.show-for-medium, tbody.show-for-medium-down, tbody.show-for-medium-up, tbody.show-for-medium-only, tbody.hide-for-large, tbody.hide-for-large-up, tbody.hide-for-large-only, tbody.hide-for-xlarge, tbody.hide-for-xlarge-up, tbody.hide-for-xlarge-only, tbody.hide-for-xxlarge-up, tbody.hide-for-xxlarge-only {
    display: table-row-group !important; }
  tr.hide-for-small, tr.hide-for-small-only, tr.show-for-medium, tr.show-for-medium-down, tr.show-for-medium-up, tr.show-for-medium-only, tr.hide-for-large, tr.hide-for-large-up, tr.hide-for-large-only, tr.hide-for-xlarge, tr.hide-for-xlarge-up, tr.hide-for-xlarge-only, tr.hide-for-xxlarge-up, tr.hide-for-xxlarge-only {
    display: table-row !important; }
  td.hide-for-small, td.hide-for-small-only, td.show-for-medium, td.show-for-medium-down, td.show-for-medium-up, td.show-for-medium-only, td.hide-for-large, td.hide-for-large-up, td.hide-for-large-only, td.hide-for-xlarge, td.hide-for-xlarge-up, td.hide-for-xlarge-only, td.hide-for-xxlarge-up, td.hide-for-xxlarge-only, th.hide-for-small, th.hide-for-small-only, th.show-for-medium, th.show-for-medium-down, th.show-for-medium-up, th.show-for-medium-only, th.hide-for-large, th.hide-for-large-up, th.hide-for-large-only, th.hide-for-xlarge, th.hide-for-xlarge-up, th.hide-for-xlarge-only, th.hide-for-xxlarge-up, th.hide-for-xxlarge-only {
    display: table-cell !important; } }

/* Large Displays: 1024px and up */
@media only screen and (min-width:64.063em) {
  /* Specific visibility for tables */
  .hide-for-small, .hide-for-small-only, .hide-for-medium, .hide-for-medium-down, .hide-for-medium-only, .show-for-medium-up, .show-for-large, .show-for-large-up, .show-for-large-only, .hide-for-xlarge, .hide-for-xlarge-up, .hide-for-xlarge-only, .hide-for-xxlarge-up, .hide-for-xxlarge-only {
    display: inherit !important; }
  .show-for-small-only, .show-for-medium, .show-for-medium-down, .show-for-medium-only, .hide-for-large, .hide-for-large-up, .hide-for-large-only, .show-for-xlarge, .show-for-xlarge-up, .show-for-xlarge-only, .show-for-xxlarge-up, .show-for-xxlarge-only {
    display: none !important; }
  table.hide-for-small, table.hide-for-small-only, table.hide-for-medium, table.hide-for-medium-down, table.hide-for-medium-only, table.show-for-medium-up, table.show-for-large, table.show-for-large-up, table.show-for-large-only, table.hide-for-xlarge, table.hide-for-xlarge-up, table.hide-for-xlarge-only, table.hide-for-xxlarge-up, table.hide-for-xxlarge-only {
    display: table; }
  thead.hide-for-small, thead.hide-for-small-only, thead.hide-for-medium, thead.hide-for-medium-down, thead.hide-for-medium-only, thead.show-for-medium-up, thead.show-for-large, thead.show-for-large-up, thead.show-for-large-only, thead.hide-for-xlarge, thead.hide-for-xlarge-up, thead.hide-for-xlarge-only, thead.hide-for-xxlarge-up, thead.hide-for-xxlarge-only {
    display: table-header-group !important; }
  tbody.hide-for-small, tbody.hide-for-small-only, tbody.hide-for-medium, tbody.hide-for-medium-down, tbody.hide-for-medium-only, tbody.show-for-medium-up, tbody.show-for-large, tbody.show-for-large-up, tbody.show-for-large-only, tbody.hide-for-xlarge, tbody.hide-for-xlarge-up, tbody.hide-for-xlarge-only, tbody.hide-for-xxlarge-up, tbody.hide-for-xxlarge-only {
    display: table-row-group !important; }
  tr.hide-for-small, tr.hide-for-small-only, tr.hide-for-medium, tr.hide-for-medium-down, tr.hide-for-medium-only, tr.show-for-medium-up, tr.show-for-large, tr.show-for-large-up, tr.show-for-large-only, tr.hide-for-xlarge, tr.hide-for-xlarge-up, tr.hide-for-xlarge-only, tr.hide-for-xxlarge-up, tr.hide-for-xxlarge-only {
    display: table-row !important; }
  td.hide-for-small, td.hide-for-small-only, td.hide-for-medium, td.hide-for-medium-down, td.hide-for-medium-only, td.show-for-medium-up, td.show-for-large, td.show-for-large-up, td.show-for-large-only, td.hide-for-xlarge, td.hide-for-xlarge-up, td.hide-for-xlarge-only, td.hide-for-xxlarge-up, td.hide-for-xxlarge-only, th.hide-for-small, th.hide-for-small-only, th.hide-for-medium, th.hide-for-medium-down, th.hide-for-medium-only, th.show-for-medium-up, th.show-for-large, th.show-for-large-up, th.show-for-large-only, th.hide-for-xlarge, th.hide-for-xlarge-up, th.hide-for-xlarge-only, th.hide-for-xxlarge-up, th.hide-for-xxlarge-only {
    display: table-cell !important; } }

/* X-Large Displays: 1441 and up */
@media only screen and (min-width:90.063em) {
  /* Specific visibility for tables */
  .hide-for-small, .hide-for-small-only, .hide-for-medium, .hide-for-medium-down, .hide-for-medium-only, .show-for-medium-up, .show-for-large-up, .hide-for-large-only, .show-for-xlarge, .show-for-xlarge-up, .show-for-xlarge-only, .hide-for-xxlarge-up, .hide-for-xxlarge-only {
    display: inherit !important; }
  .show-for-small-only, .show-for-medium, .show-for-medium-down, .show-for-medium-only, .show-for-large, .show-for-large-only, .show-for-large-down, .hide-for-xlarge, .hide-for-xlarge-up, .hide-for-xlarge-only, .show-for-xxlarge-up, .show-for-xxlarge-only {
    display: none !important; }
  table.hide-for-small, table.hide-for-small-only, table.hide-for-medium, table.hide-for-medium-down, table.hide-for-medium-only, table.show-for-medium-up, table.show-for-large-up, table.hide-for-large-only, table.show-for-xlarge, table.show-for-xlarge-up, table.show-for-xlarge-only, table.hide-for-xxlarge-up, table.hide-for-xxlarge-only {
    display: table; }
  thead.hide-for-small, thead.hide-for-small-only, thead.hide-for-medium, thead.hide-for-medium-down, thead.hide-for-medium-only, thead.show-for-medium-up, thead.show-for-large-up, thead.hide-for-large-only, thead.show-for-xlarge, thead.show-for-xlarge-up, thead.show-for-xlarge-only, thead.hide-for-xxlarge-up, thead.hide-for-xxlarge-only {
    display: table-header-group !important; }
  tbody.hide-for-small, tbody.hide-for-small-only, tbody.hide-for-medium, tbody.hide-for-medium-down, tbody.hide-for-medium-only, tbody.show-for-medium-up, tbody.show-for-large-up, tbody.hide-for-large-only, tbody.show-for-xlarge, tbody.show-for-xlarge-up, tbody.show-for-xlarge-only, tbody.hide-for-xxlarge-up, tbody.hide-for-xxlarge-only {
    display: table-row-group !important; }
  tr.hide-for-small, tr.hide-for-small-only, tr.hide-for-medium, tr.hide-for-medium-down, tr.hide-for-medium-only, tr.show-for-medium-up, tr.show-for-large-up, tr.hide-for-large-only, tr.show-for-xlarge, tr.show-for-xlarge-up, tr.show-for-xlarge-only, tr.hide-for-xxlarge-up, tr.hide-for-xxlarge-only {
    display: table-row !important; }
  td.hide-for-small, td.hide-for-small-only, td.hide-for-medium, td.hide-for-medium-down, td.hide-for-medium-only, td.show-for-medium-up, td.show-for-large-up, td.hide-for-large-only, td.show-for-xlarge, td.show-for-xlarge-up, td.show-for-xlarge-only, td.hide-for-xxlarge-up, td.hide-for-xxlarge-only, th.hide-for-small, th.hide-for-small-only, th.hide-for-medium, th.hide-for-medium-down, th.hide-for-medium-only, th.show-for-medium-up, th.show-for-large-up, th.hide-for-large-only, th.show-for-xlarge, th.show-for-xlarge-up, th.show-for-xlarge-only, th.hide-for-xxlarge-up, th.hide-for-xxlarge-only {
    display: table-cell !important; } }

/* XX-Large Displays: 1920 and up */
@media only screen and (min-width:120.063em) {
  /* Specific visibility for tables */
  .hide-for-small, .hide-for-small-only, .hide-for-medium, .hide-for-medium-down, .hide-for-medium-only, .show-for-medium-up, .show-for-large-up, .hide-for-large-only, .hide-for-xlarge-only, .show-for-xlarge-up, .show-for-xxlarge-up, .show-for-xxlarge-only {
    display: inherit !important; }
  .show-for-small-only, .show-for-medium, .show-for-medium-down, .show-for-medium-only, .show-for-large, .show-for-large-only, .show-for-large-down, .hide-for-xlarge, .show-for-xlarge-only, .hide-for-xxlarge-up, .hide-for-xxlarge-only {
    display: none !important; }
  table.hide-for-small, table.hide-for-small-only, table.hide-for-medium, table.hide-for-medium-down, table.hide-for-medium-only, table.show-for-medium-up, table.show-for-large-up, table.hide-for-xlarge-only, table.show-for-xlarge-up, table.show-for-xxlarge-up, table.show-for-xxlarge-only {
    display: table; }
  thead.hide-for-small, thead.hide-for-small-only, thead.hide-for-medium, thead.hide-for-medium-down, thead.hide-for-medium-only, thead.show-for-medium-up, thead.show-for-large-up, thead.hide-for-xlarge-only, thead.show-for-xlarge-up, thead.show-for-xxlarge-up, thead.show-for-xxlarge-only {
    display: table-header-group !important; }
  tbody.hide-for-small, tbody.hide-for-small-only, tbody.hide-for-medium, tbody.hide-for-medium-down, tbody.hide-for-medium-only, tbody.show-for-medium-up, tbody.show-for-large-up, tbody.hide-for-xlarge-only, tbody.show-for-xlarge-up, tbody.show-for-xxlarge-up, tbody.show-for-xxlarge-only {
    display: table-row-group !important; }
  tr.hide-for-small, tr.hide-for-small-only, tr.hide-for-medium, tr.hide-for-medium-down, tr.hide-for-medium-only, tr.show-for-medium-up, tr.show-for-large-up, tr.hide-for-xlarge-only, tr.show-for-xlarge-up, tr.show-for-xxlarge-up, tr.show-for-xxlarge-only {
    display: table-row !important; }
  td.hide-for-small, td.hide-for-small-only, td.hide-for-medium, td.hide-for-medium-down, td.hide-for-medium-only, td.show-for-medium-up, td.show-for-large-up, td.hide-for-xlarge-only, td.show-for-xlarge-up, td.show-for-xxlarge-up, td.show-for-xxlarge-only, th.hide-for-small, th.hide-for-small-only, th.hide-for-medium, th.hide-for-medium-down, th.hide-for-medium-only, th.show-for-medium-up, th.show-for-large-up, th.hide-for-xlarge-only, th.show-for-xlarge-up, th.show-for-xxlarge-up, th.show-for-xxlarge-only {
    display: table-cell !important; } }

/* Orientation targeting */
.show-for-landscape, .hide-for-portrait {
  display: inherit !important; }

.hide-for-landscape, .show-for-portrait {
  display: none !important; }

/* Specific visibility for tables */
table.hide-for-landscape, table.show-for-portrait {
  display: table; }

thead.hide-for-landscape, thead.show-for-portrait {
  display: table-header-group !important; }

tbody.hide-for-landscape, tbody.show-for-portrait {
  display: table-row-group !important; }

tr.hide-for-landscape, tr.show-for-portrait {
  display: table-row !important; }

td.hide-for-landscape, td.show-for-portrait, th.hide-for-landscape, th.show-for-portrait {
  display: table-cell !important; }

@media only screen and (orientation: landscape) {
  /* Specific visibility for tables */
  .show-for-landscape, .hide-for-portrait {
    display: inherit !important; }
  .hide-for-landscape, .show-for-portrait {
    display: none !important; }
  table.show-for-landscape, table.hide-for-portrait {
    display: table; }
  thead.show-for-landscape, thead.hide-for-portrait {
    display: table-header-group !important; }
  tbody.show-for-landscape, tbody.hide-for-portrait {
    display: table-row-group !important; }
  tr.show-for-landscape, tr.hide-for-portrait {
    display: table-row !important; }
  td.show-for-landscape, td.hide-for-portrait, th.show-for-landscape, th.hide-for-portrait {
    display: table-cell !important; } }

@media only screen and (orientation: portrait) {
  /* Specific visibility for tables */
  .show-for-portrait, .hide-for-landscape {
    display: inherit !important; }
  .hide-for-portrait, .show-for-landscape {
    display: none !important; }
  table.show-for-portrait, table.hide-for-landscape {
    display: table; }
  thead.show-for-portrait, thead.hide-for-landscape {
    display: table-header-group !important; }
  tbody.show-for-portrait, tbody.hide-for-landscape {
    display: table-row-group !important; }
  tr.show-for-portrait, tr.hide-for-landscape {
    display: table-row !important; }
  td.show-for-portrait, td.hide-for-landscape, th.show-for-portrait, th.hide-for-landscape {
    display: table-cell !important; } }

/* Touch-enabled device targeting */
.show-for-touch {
  display: none !important; }

.hide-for-touch {
  display: inherit !important; }

.touch .show-for-touch {
  display: inherit !important; }

.touch .hide-for-touch {
  display: none !important; }

/* Specific visibility for tables */
table.hide-for-touch {
  display: table; }

.touch table.show-for-touch {
  display: table; }

thead.hide-for-touch {
  display: table-header-group !important; }

.touch thead.show-for-touch {
  display: table-header-group !important; }

tbody.hide-for-touch {
  display: table-row-group !important; }

.touch tbody.show-for-touch {
  display: table-row-group !important; }

tr.hide-for-touch {
  display: table-row !important; }

.touch tr.show-for-touch {
  display: table-row !important; }

td.hide-for-touch {
  display: table-cell !important; }

.touch td.show-for-touch {
  display: table-cell !important; }

th.hide-for-touch {
  display: table-cell !important; }

.touch th.show-for-touch {
  display: table-cell !important; }

main, x-slidable, x-richtexteditor, x-snowfall, x-deletable, x-bubble {
  display: block; }

* {
  outline: none; }

.jsmore {
  display: none !important; }

body {
  width: 100%;
  margin-left: auto;
  margin-right: auto;
  margin-top: 0;
  margin-bottom: 0;
  max-width: 62.5rem;
  *zoom: 1;
  background-image: url("/images/ios7_xlarge.png");
  width: 100%;
  height: 100%; }
  body:before, body:after {
    content: " ";
    display: table; }
  body:after {
    clear: both; }
  @media only screen and (min-width:120.063em) {
    body {
      background-image: url("/images/ios7.png"); } }

x-snowfall {
  width: 100%;
  height: 100%;
  position: relative; }

nav#intraSubjectNavigation {
  position: relative;
  padding-left: 0.9375rem;
  padding-right: 0.9375rem;
  width: 100%;
  float: left; }
  @media only screen and (max-width: 40em) {
    nav#intraSubjectNavigation {
      position: relative;
      padding-left: 0;
      padding-right: 0;
      width: 25%;
      right: 25%;
      left: auto;
      float: left; } }
  @media only screen and (min-width:40.063em) {
    nav#intraSubjectNavigation {
      position: relative;
      padding-left: 0;
      padding-right: 0;
      width: 25%;
      float: left;
      background-color: #f0f4f4; }
    nav#intraSubjectNavigation ~ main {
      position: relative;
      padding-left: 0.9375rem;
      padding-right: 0.9375rem;
      width: 75%;
      float: left; }
    nav#intraSubjectNavigation ul {
      display: block;
      margin: 0;
      padding: 0.875rem 0;
      list-style-type: none;
      list-style-position: inside;
      font-family: "Helvetica Neue", "Helvetica", Helvetica, Arial, sans-serif; }
      nav#intraSubjectNavigation ul li {
        margin: 0px;
        font-size: 0.875rem; }
        nav#intraSubjectNavigation ul li a {
          display: block;
          color: #008cba; }
        nav#intraSubjectNavigation ul li.active > a:first-child {
          color: #4d4d4d;
          font-weight: normal;
          font-family: "Helvetica Neue", "Helvetica", Helvetica, Arial, sans-serif; }
        nav#intraSubjectNavigation ul li.divider {
          border-top: 1px solid;
          height: 0;
          padding: 0;
          list-style: none;
          border-top-color: white; }
    nav#intraSubjectNavigation h4 {
      padding-top: 20px; }
    nav#intraSubjectNavigation h4, nav#intraSubjectNavigation form, nav#intraSubjectNavigation ul li {
      padding-left: 20px;
      padding-right: 20px; }
    nav#intraSubjectNavigation ul li {
      padding-top: 5px;
      padding-bottom: 5px; }
    nav#intraSubjectNavigation ul li:hover {
      background-color: #e1e9e9; }
    nav#intraSubjectNavigation ul li.header {
      text-transform: uppercase; }
    nav#intraSubjectNavigation #numberOfDrafts {
      font-weight: normal;
      font-family: "Helvetica Neue", "Helvetica", Helvetica, Arial, sans-serif;
      text-align: center;
      text-decoration: none;
      line-height: 1;
      white-space: nowrap;
      display: inline-block;
      position: relative;
      margin-bottom: inherit;
      padding: 0.25rem 0.5rem 0.375rem;
      font-size: 0.6875rem;
      background-color: #008cba;
      color: white;
      vertical-align: bottom; }
    nav#intraSubjectNavigation #newLink {
      border-style: solid;
      border-width: 0px;
      cursor: pointer;
      font-family: "Helvetica Neue", "Helvetica", Helvetica, Arial, sans-serif;
      font-weight: normal;
      line-height: normal;
      margin: 0 0 0px;
      position: relative;
      text-decoration: none;
      text-align: center;
      display: inline-block;
      padding-top: 1rem;
      padding-right: 2rem;
      padding-bottom: 1.0625rem;
      padding-left: 2rem;
      font-size: 1rem;
      /*     @else                            { font-size: $padding - rem-calc(2); } */
      padding-top: 1rem;
      padding-bottom: 1.0625rem;
      padding-right: 0;
      padding-left: 0;
      width: 100%;
      background-color: #008cba;
      border-color: #007295;
      color: white; }
      nav#intraSubjectNavigation #newLink:hover, nav#intraSubjectNavigation #newLink:focus {
        background-color: #007295; }
      nav#intraSubjectNavigation #newLink:hover, nav#intraSubjectNavigation #newLink:focus {
        color: white; } }

#newLinkForm {
  background-color: white;
  padding: 20px; }

#action-bar {
  padding: 5px;
  background-color: #f0f4f4; }



#action-bar #rss-link {
  background-color: #e58900;
  border-color: #b76b00;
  color: white;
  float: right; }
  #action-bar #rss-link:hover, #action-bar #rss-link:focus {
    background-color: #b76b00; }
  #action-bar #rss-link:hover, #action-bar #rss-link:focus {
    color: white; }

#newPostForm {
  width: 100%;
  margin-left: auto;
  margin-right: auto;
  margin-top: 0;
  margin-bottom: 0;
  max-width: 62.5rem;
  *zoom: 1;
  background-color: white;
  margin-top: 20px;
  padding: 20px;
  margin-left: 0px;
  margin-right: 0px; }
  #newPostForm:before, #newPostForm:after {
    content: " ";
    display: table; }
  #newPostForm:after {
    clear: both; }
  #newPostForm input, #newPostForm input:focus, #newPostForm select, #newPostForm select:focus {
    background-color: white; }

textarea, #newPostForm x-richtexteditor {
  resize: vertical;
  outline: none; }

#newPostForm x-richtexteditor {
  min-height: 200px; }

.toolbar ul {
  list-style: none;
  margin: 0;
  *zoom: 1;
  margin-right: 10px;
  display: inline-block; }
  .toolbar ul:before, .toolbar ul:after {
    content: " ";
    display: table; }
  .toolbar ul:after {
    clear: both; }

.toolbar ul button, .toolbar ul #action-bar a, #action-bar .toolbar ul a {
  border-style: solid;
  border-width: 0px;
  cursor: pointer;
  font-family: "Helvetica Neue", "Helvetica", Helvetica, Arial, sans-serif;
  font-weight: normal;
  line-height: normal;
  margin: 0 0 0px;
  position: relative;
  text-decoration: none;
  text-align: center;
  display: inline-block;
  padding-top: 0.4375rem;
  padding-right: 0.875rem;
  padding-bottom: 0.5rem;
  padding-left: 0.875rem;
  /*     @else                            { font-size: $padding - rem-calc(2); } */
  background-color: #e7e7e7;
  border-color: #b9b9b9;
  color: #333333;
  margin: 0;
  float: left; }
  .toolbar ul button:hover, .toolbar ul button:focus {
    background-color: #b9b9b9; }
  .toolbar ul button:hover, .toolbar ul button:focus {
    color: #333333; }
  .toolbar ul button > button, .toolbar ul button > #action-bar a, #action-bar .toolbar ul button > a, .toolbar ul button .button {
    border-right: 1px solid;
    border-color: rgba(255, 255, 255, 0.5); }
  .toolbar ul button:last-child button, .toolbar ul button:last-child #action-bar a, #action-bar .toolbar ul button:last-child a, .toolbar ul button:last-child .button {
    border-right: 0; }
  .toolbar ul button:first-child {
    margin-left: 0; }
  .toolbar ul button:first-child, .toolbar ul button:first-child > a, .toolbar ul button:first-child > button, .toolbar ul button:first-child > #action-bar a, #action-bar .toolbar ul button:first-child > a, .toolbar ul button:first-child > .button {
    -moz-border-radius-bottomleft: 3px;
    -moz-border-radius-topleft: 3px;
    -webkit-border-bottom-left-radius: 3px;
    -webkit-border-top-left-radius: 3px;
    border-bottom-left-radius: 3px;
    border-top-left-radius: 3px; }
  .toolbar ul button:last-child, .toolbar ul button:last-child > a, .toolbar ul button:last-child > button, .toolbar ul button:last-child > #action-bar a, #action-bar .toolbar ul button:last-child > a, .toolbar ul button:last-child > .button {
    -moz-border-radius-topright: 3px;
    -moz-border-radius-bottomright: 3px;
    -webkit-border-top-right-radius: 3px;
    -webkit-border-bottom-right-radius: 3px;
    border-top-right-radius: 3px;
    border-bottom-right-radius: 3px; }

.draftButton, .publishButton {
  padding-top: 0.625rem;
  padding-right: 1.25rem;
  padding-bottom: 0.6875rem;
  padding-left: 1.25rem;
  font-size: 0.875rem;
  /*     @else                            { font-size: $padding - rem-calc(2); } */ }

.publishButton {
  background-color: #e55b00;
  border-color: #b74600;
  color: white; }
  .publishButton:hover, .publishButton:focus {
    background-color: #b74600; }
  .publishButton:hover, .publishButton:focus {
    color: white; }

main #newPostForm #buttons {
  position: relative;
  padding-left: 0;
  padding-right: 0;
  width: 100%;
  float: left; }

article {
  width: 100%;
  margin-left: auto;
  margin-right: auto;
  margin-top: 0;
  margin-bottom: 0;
  max-width: 62.5rem;
  *zoom: 1;
  background-color: white;
  margin-top: 20px;
  padding: 20px; }
  article:before, article:after {
    content: " ";
    display: table; }
  article:after {
    clear: both; }
  article input, article input:focus, article select, article select:focus {
    background-color: white; }

article .postHeading {
  position: relative;
  padding-left: 0;
  padding-right: 0;
  width: 83.33333%;
  float: left; }
article .postHeading h2 {
  margin-bottom: 0;
  font-weight: bold; }
article .postHeading h2 a {
  transition: color 0.3s ease-in-out; }
article .postHeading h2 a:not(:hover) {
  color: #333333; }

article .postActions {
  position: relative;
  padding-left: 0;
  padding-right: 0;
  width: 16.66667%;
  float: left;
  float: right; }
article .postActions a, article .postActions button, article .postActions #action-bar a, #action-bar article .postActions a {
  padding-top: 0.375rem;
  padding-right: 0.75rem;
  padding-bottom: 0.4375rem;
  padding-left: 0.75rem;
  font-size: 0.75rem;
  /*     @else                            { font-size: $padding - rem-calc(2); } */
  background-color: white;
  border-color: #cccccc;
  color: #333333;
  float: right; }
  article .postActions a:hover, article .postActions a:focus, article .postActions button:hover, article .postActions button:focus {
    background-color: #cccccc; }
  article .postActions a:hover, article .postActions a:focus, article .postActions button:hover, article .postActions button:focus {
    color: #333333; }

article .postMeta {
  position: relative;
  padding-left: 0;
  padding-right: 0;
  width: 100%;
  float: left; }
article .postMeta h6 {
  font-weight: bold;
  color: #777777; }
article .postMeta h6.indicatorDraft {
  color: #e55b00; }

article .postExcerpt {
  position: relative;
  padding-left: 0;
  padding-right: 0;
  width: 100%;
  float: left;
  word-wrap: break-word;
  text-align: justify; }

body {
  padding-top: 45px; }
</style></head>
  <body>
    <x-snowfall count="800">
      {>"app/header/head.dust"/}
      {>"app/subjects/nav.dust" active="blog"/}
      <main>
	<div id="action-bar">
	  <a href="/subjects/{subject._id}?nova=true" cite="#newPostForm">New Post <i class="fi-plus"></i></a>
	  <button>New Image<i class="fi-plus"></i></button>
	  <a href="/subjects/{subject._id}/feed" id="rss-link">RSS <i class="fi-rss"></i></a>
	</div>

	{@ne key=user.role value="student"}
	  <x-slidable id="newPostForm" {^nova}class="jsmore" hidden{/nova}>
	    <form action="/subjects/{subject._id}" method="post">
	      <input name="title" type="text" placeholder="Title" required/>
	      <div class="toolbar jsmore">
		<ul>
		  <button exec="bold"><i class="fi-bold"></i></button>
		  <button exec="italic"><i class="fi-italic"></i></button>
		  <button exec="underline"><i class="fi-underline"></i></button>
		</ul>
		<ul>
		  <button exec="insertOrderedList"><i class="fi-list-number"></i></button>
		  <button exec="insertUnorderedList"><i class="fi-list-bullet"></i></button>
		</ul>
		<ul>
		  <button exec="subscript"><i class="fi-subscript"></i></button>
		  <button exec="superscript"><i class="fi-superscript"></i></button>
		</ul>
	      </div>
	      <br/>
	      <x-richtexteditor class="jsmore" for="#content"></x-richtexteditor>
	      <textarea name="body" class="jsless" id="content"></textarea>
	      <span id="buttons">
		<button type="submit" class="publishButton">Publish</button>
		<button type="submit" class="draftButton" formaction="/subjects/{subject._id}?drafts=true">Save As Draft</button>
	      </span>
	    </form>
	  </x-slidable>
	{/ne}

	{#blog}
	  <x-deletable id="post_{$idx}">
	    <article class="post">
	      <header class="postHeading">
	    	<h2><a href="/subjects/{subject._id}/posts/{_id}">{title}</a></h2>
	      </header>

	      <section class="postActions">
	    	{@ne key=user.role value="student"}
	    	  <form action="/subjects/{subject._id}/posts/{_id}" method="post">
	      	    <input type="hidden" name="_method" value="delete"/>
	     	    <button class="deletePost" title="Remove" cite="#post_{$idx}" type="submit"><i class="fi-x"></i></button>
	    	  </form>
	    	  <button class="editPost" title="Edit"><i class="fi-pencil"></i></button>
	    	  {?draft}
	    	    <button class="publishPost" title="Publish"><i class="fi-check"></i></button>
	   	  {/draft}
	    	{/ne}
	      </section>	   

	      <section class="postMeta">
	    	{?draft}
	    	  <h6 class="indicatorDraft">Draft</h6>
	    	{:else}
	    	  <h6>Published on {date}</h6>
	    	{/draft}
	      </section>

	      <section class="postExcerpt">
	  	{body|s}
	      </section>
	    </article>
	  </x-deletable>
	{/blog}
      </main>
    </x-snowfall>
  </body>
</html>
