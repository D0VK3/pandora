var htmlparser = require("html-parser");
var ejs = require("ejs");
var path = require("path");
var sass = require("node-sass");
var uu = require("underscore");
var us = require("underscore.string");
var browserify = require("browserify-string");
var async = require("async");
var fs = require("fs");
var es6ify = require("es6ify");
var Compiler = require("../util/es6-module-transpiler.js").Compiler;

var expandPath = function(loc, options) {
    if(us.startsWith(loc, ".")) {
	return path.resolve(options.path, loc);
    } else {
	return path.resolve(loc);
    }
};

var buildHTML = function(file, options, cb) {
    var currentEl = null;
    var output = "";

    // Concatenations
    var concatenatedScripts = "";
    var concatenatedSass = "";
    var concatenatedStyles = "";

    htmlparser.parse(file, {
	openElement: function(name) {
	    currentEl = name;
	    if(name !== "script" && currentEl !== "style") {
		output += "<" + name;
	    }
	},

	attribute: function(key, value) {
	    if(currentEl === "script") {
		if(key === "src") {
		    concatenatedScripts += fs.readFileSync(expandPath(value, options));
		}
	    } else if(currentEl === "style") {
		if(key === "src") {
		    if(us.endsWith(value, ".scss")) {
			concatenatedSass += fs.readFileSync(expandPath(value, options));
		    } else {
			concatenatedStyles += fs.readFileSync(expandPath(value, options));
		    }
		}
	    } else {
		output += (" " + key + '="' + value + '"');
	    }
	},

	closeOpenedElement: function(name, token) {
	    if(currentEl !== "script" && currentEl !== "style") {
		output += token;
	    }
	},

	closeElement: function(name) {
	    if(name !== "script" && name !== "style") {
		output += ("</" + name + ">");
	    }
	    currentEl = null;
	},

	text: function(value) {
	    if(currentEl === "script") {
		concatenatedScripts += value;
	    } else if(currentEl === "style") {
		concatenatedStyles += value;
	    } else {
		output += value;
	    }
	}
    });

    // Insert JavaScripts
    modulify(concatenatedScripts, function(err, src) {
	if(err) {
	    return cb(err);
	}

	var x = browserify(src);
	if(options.esnext) {
	    x = x.transform(es6ify);
	}

	x.bundle(function(err, src) {
	    if(err) {
		return cb(err);
	    }

	    output += "<script type=\"text/javascript\">" + src + "</script>";

	    sass.render(uu.extend(options.sass, {
		data: concatenatedSass,
		success: function(css) {
		    return cb(null, output + "<style type=\"text/css\">" + css + concatenatedStyles + "</style>");
		},
		error: function(err) {
		    return cb(err);
		}
	    }));
	});
    });
};

var modulify = function(src, cb) {
    cb(null, new Compiler(src).toCJS());
};

var buildJS = function(src, options, cb) {
    modulify(src, function(err, output) {
	if(err) {
	    return cb(err);
	}
	cb(null, output);
    });
};

var buildEJS = function(src, options, cb) {
    if(src.indexOf("<head>") !== -1) {
	src = src.split(/(<head>|<\/head>)/, 5);
	buildHTML(src[2], options, function(err, output) {
	    if(err) {
		return cb(err);
	    } else {
		cb(null, src[0] + src[1] + output  + src[3] + src[4]);
	    }
	});
    } else {
	cb(null, src);
    }
};

var buildAny = function(options) {
    return function(file, cb) {
	options = uu.clone(options);
	options.path = path.dirname(path.resolve(file));
	fs.readFile(file, function(err, src) {
	    if(err) {
		return cb(err);
	    } else {
		src = src.toString();
		if(us.endsWith(file, ".js")) {
		    buildJS(src, options, cb);
		} else {
		    buildEJS(src, options, function(err, src) {
			if(!err && options.jst) {
			    src = "module.exports = exports = " + ejs.compile(src, {
				client: true,
				filename: options.path
			    });
			}
			cb(err, src);
		    });
		}
	    }
	});
    };
};

var build = function(file, options, cb) {
    async.map(file, buildAny(options), function(err, files) {
	if(err) {
	    return cb(err);
	} else {
	    return cb(null, (options.banner ? options.banner + " " : "") + files.join(""));
	}
    });
};

module.exports = function(grunt) {
    grunt.registerMultiTask("webify", function() {
	var options = this.options({
	    esnext: false,
	    jst:false,
	    sass: {
		includePaths: []
	    }
	});
	async.each(this.files, function(file, cb) {
	    build(file.src, options, function(err, out) {
		if(err) {
		    grunt.log.error(file.dest + " - " + err);
		} else {
		    grunt.log.writeln("File " + file.dest + " was created");
		    grunt.file.write(file.dest, out);
		}
		return cb();
	    });
	}, this.async());
    });
};
