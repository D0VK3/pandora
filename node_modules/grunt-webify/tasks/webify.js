var htmlparser = require("html-parser");
var ejs = require("ejs");
var path = require("path");
var sass = require("node-sass");
var uu = require("underscore");
var us = require("underscore.string");
var browserify = require("browserify-string");
var async = require("async");
var fs = require("fs");
var es6ify = require("es6ify");
var Compiler = require("../util/es6-module-transpiler.js").Compiler;

var buildHTML = function(file, options, cb) {
    var currentEl = null;
    var imp = null;
    var type = null;
    var x = null;
    var output = "";

    // Concatenations
    var concatenatedScripts = "";
    var concatenatedSass = "";
    var concatenatedStyles = "";

    // State
    var state = 0;

    // Instances of Closing Head Tag
    var iocht = 0;

    // Locations
    var filename = path.basename(file);
    var folder = path.dirname(path.resolve(file));

    fs.readFile(file, function(err, src) {

	if(err) {
	    // Catch file errors
	    return cb(err);
	} else {
	    // Make src a string
	    src = src.toString();
	    options = uu.clone(options);
	}

	htmlparser.parse(src, {
	    docType: function(value) {
		output += ("<!DOCTYPE " + value + ">");
	    },

	    openElement: function(name) {
		currentEl = name;
		if(name !== "script" && currentEl !== "style") {
		    output += "<" + name;
		}
	    },

	    attribute: function(key, value) {
		if(currentEl === "script") {
		    if(key === "src") {
			concatenatedScripts += fs.readFileSync(path.resolve(folder, value));
		    }
		} else if(currentEl === "style") {
		    if(key === "src") {
			if(us.endsWith(value, ".scss")) {
			    concatenatedSass += fs.readFileSync(path.resolve(folder, value));
			} else {
			    concatenatedStyles += fs.readFileSync(path.resolve(folder, value));
			}
		    }
		} else {
		    output += (" " + key + '="' + value + '"');
		}
	    },

	    closeOpenedElement: function(name, token) {
		if(currentEl !== "script" && currentEl !== "style") {
		    output += token;
		}
	    },

	    closeElement: function(name) {
		if(name === "head") {
		    iocht++; // Increment Iocht

		    if(iocht != 1) {
			// If there are two or more closing head tags in a doc
			// Call as an error
			cb(filename + ": Invalid HTML - Multiple closing head tags");
		    } else {

			var indexToInsertBeforeHead = output.length;

			// Insert JavaScripts
			modulify(concatenatedScripts, function(err, src) {
			    if(err) throw err;
			    var x = browserify(src);
			    if(options.esnext) {
				x = x.transform(es6ify);
			    }
			    x.bundle(function(err, src) {
				if(iocht !== 1) {
				    // An error must have already occured, halt immediately
				    return;
				}
				if(err) {
				    // Do not allow another cb
				    return cb(err);
				}

				output = us.splice(output, indexToInsertBeforeHead, 0, '<script type="text/javascript">' + src + '</script>');
				state++;

				if(state === 2) {
				    cb(null, output);
				}
			    });
			});

			// Insert Scss and Css
			uu.extend(options.sass, {
			    data: concatenatedSass,
			});
			concatenatedStyles += sass.renderSync(options.sass);
			output = us.splice(output, indexToInsertBeforeHead, 0, '<style type="text/css">' + concatenatedStyles + '</style>');
		    }
		}
		if(name !== "script" && name !== "style") {
		    output += ("</" + name + ">");
		}
		currentEl = null;
	    },

	    text: function(value) {
		if(currentEl === "script") {
		    concatenatedScripts += value;
		} else if(currentEl === "style") {
		    concatenatedStyles += value;
		} else {
		    output += value;
		}
	    }
	});

	state++;

	if(state === 2 || iocht === 0) {
	    cb(null, output);
	}
    });
};

var modulify = function(src, cb) {
    cb(null, new Compiler(src).toCJS());
};

var buildJS = function(file, options, cb) {
    modulify(fs.readFileSync(file).toString(), function(err, output) {
	cb(null, output);
    });
};

var buildEJS = function(file, options, cb) {
    buildHTML(file, options, function(err, output) {
	if(err) {
	    return cb(err);
	}
	cb(null, "module.exports = exports = " + ejs.compile(output, {
	    client: true,
	    filename: file
	}));
    });
};

var buildAny = function(options) {
    return function(file, cb) {
	if(us.endsWith(file, ".js")) {
	    buildJS(file, options, cb);
	} else {
	    buildEJS(file, options, cb);
	}
    };
};

var build = function(options) {
    return function(file, cb) {
	async.map(file.src, buildAny(options), function(err, files) {
	    if(err) return cb(err);
	    fs.writeFileSync(file.dest, options.banner + " " + files.join(""));
	    console.log("File " + file.dest + " created");
	    cb(null);
	});
    };
};

module.exports = function(grunt) {
    grunt.registerMultiTask("webify", function() {
	var done = this.async();
	var options = this.options({
	    esnext: false,
	    banner: "",
	    sass: {
		includePaths: []
	    }
	});
	if(!options.sass.includePaths) options.sass.includePaths = [];
	options.sass.includePaths.push(path.resolve(__dirname, "..", "foundation/scss"));
	async.each(this.files, build(options), function(err) {
	    if(err) grunt.log.error(err);
	    done();
	});
    });
};
